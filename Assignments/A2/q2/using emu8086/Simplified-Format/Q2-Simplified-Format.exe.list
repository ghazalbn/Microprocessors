EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Q2-Simplified-Format.exe -- emu8086 assembler version: 4.08  
 
[ 11/25/2021  --  9:34:04 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ;Q2 using SIMPLIFIED SEGMENT DEFINITION
[   3]        :                                       
[   4]        :                                       .MODEL  SMALL
[   5]        :                                       .STACK  64
[   6]        :                                       ;--------------------------------------------------
[   7]        :                                       .DATA
[   8]    0040: 0A 14 5F 16 19 46 58 3D 2C 5D         MYDATA  DB 10,20,95,22,25,70,88,61,44,93 ;my array of 10 numbers
[   9]        :                                       ;MYDATA  DB 10 DUP(0FFH) another array
[  10]    004A: 00 00                                 SUM     DW 0
[  11]    004C: 00                                    AVG     DB ?
[  12]    004D: 00                                    MAX     DB ?
[  13]    004E: 00                                    MIN     DB ?
[  14]        :                                       ;--------------------------------------------------
[  15]        :                                       .CODE
[  16]    0050:                                       MAIN    PROC FAR     ;program entry point
[  17]    0050: B8 04 00                              MOV AX,@DATA ;load the data segment address
[  18]    0053: 8E D8                                 MOV DS,AX    ;assign value to DS
[  19]        :                                       
[  20]    0055: B9 0A 00                              MOV CX, 10
[  21]    0058: BE 00 00                              MOV SI, 0
[  22]    005B: B4 00                                 MOV AH, 0
[  23]        :                                       
[  24]    005D: 8A 04                                 LOP:    MOV AL, MYDATA[SI]
[  25]    005F: 83 FE 00                              CMP SI, 0
[  26]    0062: 75 06                                 JNE MAX_NUM
[  27]    0064: A2 0D 00                              MOV MAX, AL
[  28]    0067: A2 0E 00                              MOV MIN, AL
[  29]        :                                       
[  30]    006A: 38 06 0D 00                           MAX_NUM:CMP MAX, AL  ;update max
[  31]    006E: 73 03                                 JAE MIN_NUM
[  32]    0070: A2 0D 00                              MOV MAX, AL
[  33]        :                                       
[  34]    0073: 38 06 0E 00                           MIN_NUM:CMP MIN, AL  ;update min
[  35]    0077: 76 03                                 JBE ADD_NUM
[  36]    0079: A2 0E 00                              MOV MIN, AL
[  37]        :                                       
[  38]    007C: 01 06 0A 00                           ADD_NUM:ADD SUM, AX
[  39]    0080: 46                                    INC SI
[  40]    0081: E2 DA                                 LOOP LOP     ;dec CX and JNZ
[  41]        :                                       
[  42]    0083: A1 0A 00                              AVG_ARR:MOV AX, SUM
[  43]    0086: F7 F6                                 DIV SI       ;div SUM by 10 to calculate avg of array
[  44]    0088: A2 0C 00                              MOV AVG, AL
[  45]        :                                       
[  46]    008B: B4 4C                                 MOV AH,4CH   ;set up to
[  47]    008D: CD 21                                 INT 21H      ;return to the OS
[  48]        :                                       MAIN    ENDP
[  49]        :                                       END MAIN     ;program exit point
[  50]        :                                       
[  51]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 8F      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 40      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: E6      -   check sum (l.byte)
0013: C4      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 05      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 05      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
