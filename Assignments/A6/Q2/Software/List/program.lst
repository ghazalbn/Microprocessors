
AVRASM ver. 2.1.30  D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm Thu Jan 27 08:08:23 2022

D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _OP=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0100      	.DB  0x0,0x0,0x0,0x1
                 
                 _0x0:
000035 6425
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1135): warning: .cseg .db misalignment - padding zero byte
000036 0000      	.DB  0x25,0x64,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 0001      	.DB  0x1
                 _0x2020000:
000039 4e2d
00003a 4e41
00003b 4900
00003c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\uni\rizpar\assignments\6\Q2\Software\List\program.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003e 0004      	.DW  0x04
00003f 0004      	.DW  0x04
000040 0066      	.DW  __REG_VARS*2
                 
000041 0002      	.DW  0x02
000042 0278      	.DW  __base_y_G100
000043 006e      	.DW  _0x2000003*2
                 
000044 0001      	.DW  0x01
000045 027c      	.DW  __seed_G101
000046 0070      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004f e1f8      	LDI  R31,0x18
000050 bdf1      	OUT  WDTCR,R31
000051 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 01b1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;
                 ;#define EQUAL       '='
                 ;#define PLUS        '+'
                 ;#define MINUS       '-'
                 ;#define DIV         '/'
                 ;#define MULT        '*'
                 ;
                 ;#define CLEAR       'c'
                 ;
                 ;
                 ;#include <mega32.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;
                 ;#define EQUAL       '='
                 ;#define PLUS        '+'
                 ;#define MINUS       '-'
                 ;#define DIV         '/'
                 ;#define MULT        '*'
                 ;
                 ;#define CLEAR       'c'
                 ;
                 ;float number[5];
                 ;unsigned char operator[4];
                 ;int count = 0;
                 ;unsigned char OP = 1;
                 ;
                 ;void calculate()
                 ; 0000 004C {
                 
                 	.CSEG
                 _calculate:
                 ; .FSTART _calculate
                 ; 0000 004D     char i,j,k;
                 ; 0000 004E     char operators[4]={'/','*','-','+'};
                 ; 0000 004F     unsigned char buffer[16];
                 ; 0000 0050     int temp;
                 ; 0000 0051     for(k=0;k<4;k++)
000078 9764      	SBIW R28,20
000079 e2ef      	LDI  R30,LOW(47)
00007a 8be8      	STD  Y+16,R30
00007b e2ea      	LDI  R30,LOW(42)
00007c 8be9      	STD  Y+17,R30
00007d e2ed      	LDI  R30,LOW(45)
00007e 8bea      	STD  Y+18,R30
00007f e2eb      	LDI  R30,LOW(43)
000080 8beb      	STD  Y+19,R30
000081 940e 06b0 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	operators -> Y+22
                 ;	buffer -> Y+6
                 ;	temp -> R20,R21
000083 e030      	LDI  R19,LOW(0)
                 _0x4:
000084 3034      	CPI  R19,4
000085 f008      	BRLO PC+2
000086 c0b2      	RJMP _0x5
                 ; 0000 0052     {
                 ; 0000 0053         for(i=0;i<count;i++)
000087 e010      	LDI  R17,LOW(0)
                 _0x7:
000088 01f2      	MOVW R30,R4
000089 2fa1      	MOV  R26,R17
00008a e0b0      	LDI  R27,0
00008b 17ae      	CP   R26,R30
00008c 07bf      	CPC  R27,R31
00008d f00c      	BRLT PC+2
00008e c0a8      	RJMP _0x8
                 ; 0000 0054         {
                 ; 0000 0055             if(operator[i] == operators[k])
00008f 2fe1      	MOV  R30,R17
000090 e0f0      	LDI  R31,0
000091 58ec      	SUBI R30,LOW(-_operator)
000092 4ffd      	SBCI R31,HIGH(-_operator)
000093 8000      	LD   R0,Z
000094 2fe3      	MOV  R30,R19
000095 e0f0      	LDI  R31,0
000096 01de      	MOVW R26,R28
000097 9656      	ADIW R26,22
000098 0fae      	ADD  R26,R30
000099 1fbf      	ADC  R27,R31
00009a 91ec      	LD   R30,X
00009b 15e0      	CP   R30,R0
00009c f009      	BREQ PC+2
00009d c097      	RJMP _0x9
                 ; 0000 0056             {
                 ; 0000 0057                 if(k==0)
00009e 3030      	CPI  R19,0
00009f f4c9      	BRNE _0xA
                 ; 0000 0058                     number[i] = number[i] / number [i+1];
0000a0 940e 0474 	CALL SUBOPT_0x0
0000a2 0fea      	ADD  R30,R26
0000a3 1ffb      	ADC  R31,R27
0000a4 93ff      	PUSH R31
0000a5 93ef      	PUSH R30
0000a6 940e 0474 	CALL SUBOPT_0x0
0000a8 940e 047b 	CALL SUBOPT_0x1
0000aa 937f      	PUSH R23
0000ab 936f      	PUSH R22
0000ac 93ff      	PUSH R31
0000ad 93ef      	PUSH R30
0000ae 940e 0480 	CALL SUBOPT_0x2
0000b0 91af      	POP  R26
0000b1 91bf      	POP  R27
0000b2 918f      	POP  R24
0000b3 919f      	POP  R25
0000b4 940e 0627 	CALL __DIVF21
0000b6 91af      	POP  R26
0000b7 91bf      	POP  R27
0000b8 c052      	RJMP _0x67
                 ; 0000 0059                 else if(k==1)
                 _0xA:
0000b9 3031      	CPI  R19,1
0000ba f4c9      	BRNE _0xC
                 ; 0000 005A                     number[i] = number[i] * number [i+1];
0000bb 940e 0474 	CALL SUBOPT_0x0
0000bd 0fea      	ADD  R30,R26
0000be 1ffb      	ADC  R31,R27
0000bf 93ff      	PUSH R31
0000c0 93ef      	PUSH R30
0000c1 940e 0474 	CALL SUBOPT_0x0
0000c3 940e 047b 	CALL SUBOPT_0x1
0000c5 937f      	PUSH R23
0000c6 936f      	PUSH R22
0000c7 93ff      	PUSH R31
0000c8 93ef      	PUSH R30
0000c9 940e 0480 	CALL SUBOPT_0x2
0000cb 91af      	POP  R26
0000cc 91bf      	POP  R27
0000cd 918f      	POP  R24
0000ce 919f      	POP  R25
0000cf 940e 05d9 	CALL __MULF12
0000d1 91af      	POP  R26
0000d2 91bf      	POP  R27
0000d3 c037      	RJMP _0x67
                 ; 0000 005B                 else if(k==2)
                 _0xC:
0000d4 3032      	CPI  R19,2
0000d5 f4d9      	BRNE _0xE
                 ; 0000 005C                     number[i] = number[i] - number [i+1];
0000d6 940e 0474 	CALL SUBOPT_0x0
0000d8 0fea      	ADD  R30,R26
0000d9 1ffb      	ADC  R31,R27
0000da 93ff      	PUSH R31
0000db 93ef      	PUSH R30
0000dc 940e 0474 	CALL SUBOPT_0x0
0000de 940e 047b 	CALL SUBOPT_0x1
0000e0 937f      	PUSH R23
0000e1 936f      	PUSH R22
0000e2 93ff      	PUSH R31
0000e3 93ef      	PUSH R30
0000e4 940e 0480 	CALL SUBOPT_0x2
0000e6 91af      	POP  R26
0000e7 91bf      	POP  R27
0000e8 918f      	POP  R24
0000e9 919f      	POP  R25
0000ea 940e 06a3 	CALL __SWAPD12
0000ec 940e 0582 	CALL __SUBF12
0000ee 91af      	POP  R26
0000ef 91bf      	POP  R27
0000f0 c01a      	RJMP _0x67
                 ; 0000 005D                 else if(k==3)
                 _0xE:
0000f1 3033      	CPI  R19,3
0000f2 f4d1      	BRNE _0x10
                 ; 0000 005E                     number[i] = number[i] + number [i+1];
0000f3 940e 0474 	CALL SUBOPT_0x0
0000f5 0fea      	ADD  R30,R26
0000f6 1ffb      	ADC  R31,R27
0000f7 93ff      	PUSH R31
0000f8 93ef      	PUSH R30
0000f9 940e 0474 	CALL SUBOPT_0x0
0000fb 940e 047b 	CALL SUBOPT_0x1
0000fd 937f      	PUSH R23
0000fe 936f      	PUSH R22
0000ff 93ff      	PUSH R31
000100 93ef      	PUSH R30
000101 940e 0480 	CALL SUBOPT_0x2
000103 91af      	POP  R26
000104 91bf      	POP  R27
000105 918f      	POP  R24
000106 919f      	POP  R25
000107 940e 0589 	CALL __ADDF12
000109 91af      	POP  R26
00010a 91bf      	POP  R27
                 _0x67:
00010b 940e 0695 	CALL __PUTDP1
                 ; 0000 005F                 for(j=i;j<count - 1;j++)
                 _0x10:
00010d 2f01      	MOV  R16,R17
                 _0x12:
00010e 01f2      	MOVW R30,R4
00010f 9731      	SBIW R30,1
000110 2fa0      	MOV  R26,R16
000111 e0b0      	LDI  R27,0
000112 17ae      	CP   R26,R30
000113 07bf      	CPC  R27,R31
000114 f4ec      	BRGE _0x13
                 ; 0000 0060                 {
                 ; 0000 0061                     number[j+1] = number[j+2];
000115 2fe0      	MOV  R30,R16
000116 e0f0      	LDI  R31,0
000117 9631      	ADIW R30,1
000118 940e 0489 	CALL SUBOPT_0x3
00011a 010f      	MOVW R0,R30
00011b 2fa0      	MOV  R26,R16
00011c 27bb      	CLR  R27
00011d 940e 0681 	CALL __MULW2_4
                +
00011f 59a8     +SUBI R26 , LOW ( - _number - ( 8 ) )
000120 4fbd     +SBCI R27 , HIGH ( - _number - ( 8 ) )
                 	__ADDW2MN _number,8
000121 940e 068f 	CALL __GETD1P
000123 01d0      	MOVW R26,R0
000124 940e 0695 	CALL __PUTDP1
                 ; 0000 0062                     operator[j] = operator[j+1];
000126 2fa0      	MOV  R26,R16
000127 e0b0      	LDI  R27,0
000128 58ac      	SUBI R26,LOW(-_operator)
000129 4fbd      	SBCI R27,HIGH(-_operator)
00012a 2fe0      	MOV  R30,R16
00012b e0f0      	LDI  R31,0
                +
00012c 58eb     +SUBI R30 , LOW ( - _operator - ( 1 ) )
00012d 4ffd     +SBCI R31 , HIGH ( - _operator - ( 1 ) )
                 	__ADDW1MN _operator,1
00012e 81e0      	LD   R30,Z
00012f 93ec      	ST   X,R30
                 ; 0000 0063                 }
000130 5f0f      	SUBI R16,-1
000131 cfdc      	RJMP _0x12
                 _0x13:
                 ; 0000 0064                 count --;
000132 01f2      	MOVW R30,R4
000133 9731      	SBIW R30,1
000134 012f      	MOVW R4,R30
                 ; 0000 0065             }
                 ; 0000 0066         }
                 _0x9:
000135 5f1f      	SUBI R17,-1
000136 cf51      	RJMP _0x7
                 _0x8:
                 ; 0000 0067 
                 ; 0000 0068 
                 ; 0000 0069     }
000137 5f3f      	SUBI R19,-1
000138 cf4b      	RJMP _0x4
                 _0x5:
                 ; 0000 006A     temp = number[0];
000139 91e0 0260 	LDS  R30,_number
00013b 91f0 0261 	LDS  R31,_number+1
00013d 9160 0262 	LDS  R22,_number+2
00013f 9170 0263 	LDS  R23,_number+3
000141 940e 0518 	CALL __CFD1
000143 01af      	MOVW R20,R30
                 ; 0000 006B     sprintf(buffer,"%d", temp);
000144 01fe      	MOVW R30,R28
000145 9636      	ADIW R30,6
000146 93fa      	ST   -Y,R31
000147 93ea      	ST   -Y,R30
                +
000148 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000149 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00014a 93fa      	ST   -Y,R31
00014b 93ea      	ST   -Y,R30
00014c 01fa      	MOVW R30,R20
00014d 940e 0686 	CALL __CWD1
00014f 940e 069e 	CALL __PUTPARD1
000151 e084      	LDI  R24,4
000152 940e 0427 	CALL _sprintf
000154 9628      	ADIW R28,8
                 ; 0000 006C     lcd_puts(buffer);
000155 01de      	MOVW R26,R28
000156 9616      	ADIW R26,6
000157 d11c      	RCALL _lcd_puts
                 ; 0000 006D }
000158 940e 06b7 	CALL __LOADLOCR6
00015a 966a      	ADIW R28,26
00015b 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char keypad() {
                 ; 0000 006F unsigned char keypad() {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0070     unsigned char res = 255;
                 ; 0000 0071 
                 ; 0000 0072     KEYPAD_R1 = 1;
00015c 931a      	ST   -Y,R17
                 ;	res -> R17
00015d ef1f      	LDI  R17,255
00015e 9a90      	SBI  0x12,0
                 ; 0000 0073     KEYPAD_R2 = 0;
00015f 9891      	CBI  0x12,1
                 ; 0000 0074     KEYPAD_R3 = 0;
000160 940e 0490 	CALL SUBOPT_0x4
                 ; 0000 0075     KEYPAD_R4 = 0;
                 ; 0000 0076 
                 ; 0000 0077     delay_ms(5);
                 ; 0000 0078     if (KEYPAD_C1)
000162 9b84      	SBIS 0x10,4
000163 c002      	RJMP _0x1C
                 ; 0000 0079         res = KEYPAD_NUM7;
000164 e017      	LDI  R17,LOW(7)
                 ; 0000 007A     else if (KEYPAD_C2)
000165 c00a      	RJMP _0x1D
                 _0x1C:
000166 9b85      	SBIS 0x10,5
000167 c002      	RJMP _0x1E
                 ; 0000 007B         res = KEYPAD_NUM8;
000168 e018      	LDI  R17,LOW(8)
                 ; 0000 007C     else if (KEYPAD_C3)
000169 c006      	RJMP _0x1F
                 _0x1E:
00016a 9b86      	SBIS 0x10,6
00016b c002      	RJMP _0x20
                 ; 0000 007D         res = KEYPAD_NUM9;
00016c e019      	LDI  R17,LOW(9)
                 ; 0000 007E     else if (KEYPAD_C4)
00016d c002      	RJMP _0x21
                 _0x20:
00016e 9987      	SBIC 0x10,7
                 ; 0000 007F         res = DIV;
00016f e21f      	LDI  R17,LOW(47)
                 ; 0000 0080 
                 ; 0000 0081     KEYPAD_R1 = 0;
                 _0x21:
                 _0x1F:
                 _0x1D:
000170 9890      	CBI  0x12,0
                 ; 0000 0082     KEYPAD_R2 = 1;
000171 9a91      	SBI  0x12,1
                 ; 0000 0083     KEYPAD_R3 = 0;
000172 940e 0490 	CALL SUBOPT_0x4
                 ; 0000 0084     KEYPAD_R4 = 0;
                 ; 0000 0085 
                 ; 0000 0086     delay_ms(5);
                 ; 0000 0087     if (KEYPAD_C1)
000174 9b84      	SBIS 0x10,4
000175 c002      	RJMP _0x2B
                 ; 0000 0088         res = KEYPAD_NUM4;
000176 e014      	LDI  R17,LOW(4)
                 ; 0000 0089     else if (KEYPAD_C2)
000177 c00a      	RJMP _0x2C
                 _0x2B:
000178 9b85      	SBIS 0x10,5
000179 c002      	RJMP _0x2D
                 ; 0000 008A         res = KEYPAD_NUM5;
00017a e015      	LDI  R17,LOW(5)
                 ; 0000 008B     else if (KEYPAD_C3)
00017b c006      	RJMP _0x2E
                 _0x2D:
00017c 9b86      	SBIS 0x10,6
00017d c002      	RJMP _0x2F
                 ; 0000 008C         res = KEYPAD_NUM6;
00017e e016      	LDI  R17,LOW(6)
                 ; 0000 008D     else if (KEYPAD_C4)
00017f c002      	RJMP _0x30
                 _0x2F:
000180 9987      	SBIC 0x10,7
                 ; 0000 008E         res = MULT;
000181 e21a      	LDI  R17,LOW(42)
                 ; 0000 008F 
                 ; 0000 0090     KEYPAD_R1 = 0;
                 _0x30:
                 _0x2E:
                 _0x2C:
000182 9890      	CBI  0x12,0
                 ; 0000 0091     KEYPAD_R2 = 0;
000183 9891      	CBI  0x12,1
                 ; 0000 0092     KEYPAD_R3 = 1;
000184 9a92      	SBI  0x12,2
                 ; 0000 0093     KEYPAD_R4 = 0;
000185 9893      	CBI  0x12,3
                 ; 0000 0094 
                 ; 0000 0095     delay_ms(5);
000186 e0a5      	LDI  R26,LOW(5)
000187 e0b0      	LDI  R27,0
000188 940e 04df 	CALL _delay_ms
                 ; 0000 0096     if (KEYPAD_C1)
00018a 9b84      	SBIS 0x10,4
00018b c002      	RJMP _0x3A
                 ; 0000 0097         res = KEYPAD_NUM1;
00018c e011      	LDI  R17,LOW(1)
                 ; 0000 0098     else if (KEYPAD_C2)
00018d c00a      	RJMP _0x3B
                 _0x3A:
00018e 9b85      	SBIS 0x10,5
00018f c002      	RJMP _0x3C
                 ; 0000 0099         res = KEYPAD_NUM2;
000190 e012      	LDI  R17,LOW(2)
                 ; 0000 009A     else if (KEYPAD_C3)
000191 c006      	RJMP _0x3D
                 _0x3C:
000192 9b86      	SBIS 0x10,6
000193 c002      	RJMP _0x3E
                 ; 0000 009B         res = KEYPAD_NUM3;
000194 e013      	LDI  R17,LOW(3)
                 ; 0000 009C     else if (KEYPAD_C4)
000195 c002      	RJMP _0x3F
                 _0x3E:
000196 9987      	SBIC 0x10,7
                 ; 0000 009D         res = MINUS;
000197 e21d      	LDI  R17,LOW(45)
                 ; 0000 009E 
                 ; 0000 009F     KEYPAD_R1 = 0;
                 _0x3F:
                 _0x3D:
                 _0x3B:
000198 9890      	CBI  0x12,0
                 ; 0000 00A0     KEYPAD_R2 = 0;
000199 9891      	CBI  0x12,1
                 ; 0000 00A1     KEYPAD_R3 = 0;
00019a 9892      	CBI  0x12,2
                 ; 0000 00A2     KEYPAD_R4 = 1;
00019b 9a93      	SBI  0x12,3
                 ; 0000 00A3 
                 ; 0000 00A4     delay_ms(5);
00019c e0a5      	LDI  R26,LOW(5)
00019d e0b0      	LDI  R27,0
00019e 940e 04df 	CALL _delay_ms
                 ; 0000 00A5     if (KEYPAD_C2)
0001a0 9b85      	SBIS 0x10,5
0001a1 c002      	RJMP _0x49
                 ; 0000 00A6         res = KEYPAD_NUM0;
0001a2 e010      	LDI  R17,LOW(0)
                 ; 0000 00A7     else if (KEYPAD_C1)
0001a3 c00a      	RJMP _0x4A
                 _0x49:
0001a4 9b84      	SBIS 0x10,4
0001a5 c002      	RJMP _0x4B
                 ; 0000 00A8         res = CLEAR;
0001a6 e613      	LDI  R17,LOW(99)
                 ; 0000 00A9     else if (KEYPAD_C3)
0001a7 c006      	RJMP _0x4C
                 _0x4B:
0001a8 9b86      	SBIS 0x10,6
0001a9 c002      	RJMP _0x4D
                 ; 0000 00AA         res = EQUAL;
0001aa e31d      	LDI  R17,LOW(61)
                 ; 0000 00AB     else if (KEYPAD_C4)
0001ab c002      	RJMP _0x4E
                 _0x4D:
0001ac 9987      	SBIC 0x10,7
                 ; 0000 00AC         res = PLUS;
0001ad e21b      	LDI  R17,LOW(43)
                 ; 0000 00AD 
                 ; 0000 00AE     return res;
                 _0x4E:
                 _0x4C:
                 _0x4A:
0001ae 2fe1      	MOV  R30,R17
0001af 9119      	LD   R17,Y+
0001b0 9508      	RET
                 ; 0000 00AF }
                 ; .FEND
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 00B2 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B3     unsigned char key,i;
                 ; 0000 00B4     DDRC = 0xFF;
                 ;	key -> R17
                 ;	i -> R16
0001b1 efef      	LDI  R30,LOW(255)
0001b2 bbe4      	OUT  0x14,R30
                 ; 0000 00B5     DDRD = 0x0F;
0001b3 e0ef      	LDI  R30,LOW(15)
0001b4 bbe1      	OUT  0x11,R30
                 ; 0000 00B6     PORTC = 0x00;
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 bbe5      	OUT  0x15,R30
                 ; 0000 00B7 
                 ; 0000 00B8     lcd_init(16);
0001b7 e1a0      	LDI  R26,LOW(16)
0001b8 d0cc      	RCALL _lcd_init
                 ; 0000 00B9     lcd_clear();
0001b9 d099      	RCALL _lcd_clear
                 ; 0000 00BA 
                 ; 0000 00BB     while (1) {
                 _0x50:
                 ; 0000 00BC         key = keypad();
0001ba dfa1      	RCALL _keypad
0001bb 2f1e      	MOV  R17,R30
                 ; 0000 00BD 
                 ; 0000 00BE         if (key != 255) {
0001bc 3f1f      	CPI  R17,255
0001bd f409      	BRNE PC+2
0001be c065      	RJMP _0x53
                 ; 0000 00BF             while (keypad() != 255);
                 _0x54:
0001bf df9c      	RCALL _keypad
0001c0 3fef      	CPI  R30,LOW(0xFF)
0001c1 f7e9      	BRNE _0x54
                 ; 0000 00C0             delay_ms(20);
0001c2 e1a4      	LDI  R26,LOW(20)
0001c3 e0b0      	LDI  R27,0
0001c4 940e 04df 	CALL _delay_ms
                 ; 0000 00C1             if(key >=0 && key <=9)
0001c6 3010      	CPI  R17,0
0001c7 f010      	BRLO _0x58
0001c8 301a      	CPI  R17,10
0001c9 f008      	BRLO _0x59
                 _0x58:
0001ca c02d      	RJMP _0x57
                 _0x59:
                 ; 0000 00C2             {
                 ; 0000 00C3             lcd_putchar(key + 48);
0001cb 2fa1      	MOV  R26,R17
0001cc 5da0      	SUBI R26,-LOW(48)
0001cd d091      	RCALL _lcd_putchar
                 ; 0000 00C4             number[count] *= 10;
0001ce 01f2      	MOVW R30,R4
0001cf 940e 0489 	CALL SUBOPT_0x3
0001d1 93ff      	PUSH R31
0001d2 93ef      	PUSH R30
0001d3 01df      	MOVW R26,R30
0001d4 940e 068f 	CALL __GETD1P
                +
0001d6 e0a0     +LDI R26 , LOW ( 0x41200000 )
0001d7 e0b0     +LDI R27 , HIGH ( 0x41200000 )
0001d8 e280     +LDI R24 , BYTE3 ( 0x41200000 )
0001d9 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
0001da 940e 05d9 	CALL __MULF12
0001dc 91af      	POP  R26
0001dd 91bf      	POP  R27
0001de 940e 0695 	CALL __PUTDP1
                 ; 0000 00C5             number[count] += key;
0001e0 01f2      	MOVW R30,R4
0001e1 940e 0489 	CALL SUBOPT_0x3
0001e3 93ff      	PUSH R31
0001e4 93ef      	PUSH R30
0001e5 01df      	MOVW R26,R30
0001e6 940e 068f 	CALL __GETD1P
0001e8 01df      	MOVW R26,R30
0001e9 01cb      	MOVW R24,R22
0001ea 2fe1      	MOV  R30,R17
0001eb e0f0      	LDI  R31,0
0001ec 940e 0686 	CALL __CWD1
0001ee 940e 054f 	CALL __CDF1
0001f0 940e 0589 	CALL __ADDF12
0001f2 91af      	POP  R26
0001f3 91bf      	POP  R27
0001f4 940e 0695 	CALL __PUTDP1
                 ; 0000 00C6             OP = 0;
0001f6 2477      	CLR  R7
                 ; 0000 00C7             }
                 ; 0000 00C8             else if(key == 'c')
0001f7 c02c      	RJMP _0x5A
                 _0x57:
0001f8 3613      	CPI  R17,99
0001f9 f469      	BRNE _0x5B
                 ; 0000 00C9             {
                 ; 0000 00CA                 lcd_clear();
0001fa d058      	RCALL _lcd_clear
                 ; 0000 00CB                 for(i=0;i<5;i++)
0001fb e000      	LDI  R16,LOW(0)
                 _0x5D:
0001fc 3005      	CPI  R16,5
0001fd f420      	BRSH _0x5E
                 ; 0000 00CC                     number[i]=0;
0001fe 940e 0496 	CALL SUBOPT_0x5
000200 5f0f      	SUBI R16,-1
000201 cffa      	RJMP _0x5D
                 _0x5E:
                 ; 0000 00CD count = 0;
000202 2444      	CLR  R4
000203 2455      	CLR  R5
                 ; 0000 00CE                 OP = 1;
000204 e0e1      	LDI  R30,LOW(1)
000205 2e7e      	MOV  R7,R30
                 ; 0000 00CF             }
                 ; 0000 00D0             else if(key == '=')
000206 c01d      	RJMP _0x5F
                 _0x5B:
000207 331d      	CPI  R17,61
000208 f471      	BRNE _0x60
                 ; 0000 00D1             {
                 ; 0000 00D2                 lcd_clear();
000209 d049      	RCALL _lcd_clear
                 ; 0000 00D3                 calculate();
00020a de6d      	RCALL _calculate
                 ; 0000 00D4                 for(i=0;i<5;i++)
00020b e000      	LDI  R16,LOW(0)
                 _0x62:
00020c 3005      	CPI  R16,5
00020d f420      	BRSH _0x63
                 ; 0000 00D5                     number[i]=0;
00020e 940e 0496 	CALL SUBOPT_0x5
000210 5f0f      	SUBI R16,-1
000211 cffa      	RJMP _0x62
                 _0x63:
                 ; 0000 00D6 count = 0;
000212 2444      	CLR  R4
000213 2455      	CLR  R5
                 ; 0000 00D7                 OP = 1;
000214 e0e1      	LDI  R30,LOW(1)
000215 2e7e      	MOV  R7,R30
                 ; 0000 00D8             }
                 ; 0000 00D9             else if(!OP)
000216 c00d      	RJMP _0x64
                 _0x60:
000217 2077      	TST  R7
000218 f459      	BRNE _0x65
                 ; 0000 00DA             {
                 ; 0000 00DB                 OP = 1;
000219 e0e1      	LDI  R30,LOW(1)
00021a 2e7e      	MOV  R7,R30
                 ; 0000 00DC                 operator[count] = key;
00021b 01f2      	MOVW R30,R4
00021c 58ec      	SUBI R30,LOW(-_operator)
00021d 4ffd      	SBCI R31,HIGH(-_operator)
00021e 8310      	ST   Z,R17
                 ; 0000 00DD                 lcd_putchar(key);
00021f 2fa1      	MOV  R26,R17
000220 d03e      	RCALL _lcd_putchar
                 ; 0000 00DE                 count ++;
000221 01f2      	MOVW R30,R4
000222 9631      	ADIW R30,1
000223 012f      	MOVW R4,R30
                 ; 0000 00DF             }
                 ; 0000 00E0         }
                 _0x65:
                 _0x64:
                 _0x5F:
                 _0x5A:
                 ; 0000 00E1     }
                 _0x53:
000224 cf95      	RJMP _0x50
                 ; 0000 00E2 }
                 _0x66:
000225 cfff      	RJMP _0x66
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000226 93aa      	ST   -Y,R26
000227 b3e5      	IN   R30,0x15
000228 70ef      	ANDI R30,LOW(0xF)
000229 2fae      	MOV  R26,R30
00022a 81e8      	LD   R30,Y
00022b 7fe0      	ANDI R30,LOW(0xF0)
00022c 2bea      	OR   R30,R26
00022d bbe5      	OUT  0x15,R30
                +
00022e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00022f 958a     +DEC R24
000230 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000231 9aaa      	SBI  0x15,2
                +
000232 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000233 958a     +DEC R24
000234 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000235 98aa      	CBI  0x15,2
                +
000236 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000237 958a     +DEC R24
000238 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000239 c077      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00023a 93aa      	ST   -Y,R26
00023b 81a8      	LD   R26,Y
00023c dfe9      	RCALL __lcd_write_nibble_G100
00023d 81e8          ld    r30,y
00023e 95e2          swap  r30
00023f 83e8          st    y,r30
000240 81a8      	LD   R26,Y
000241 dfe4      	RCALL __lcd_write_nibble_G100
                +
000242 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000243 958a     +DEC R24
000244 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000245 c06b      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000246 93aa      	ST   -Y,R26
000247 81e8      	LD   R30,Y
000248 e0f0      	LDI  R31,0
000249 58e8      	SUBI R30,LOW(-__base_y_G100)
00024a 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00024b 81e0      	LD   R30,Z
00024c 81a9      	LDD  R26,Y+1
00024d 0fae      	ADD  R26,R30
00024e dfeb      	RCALL __lcd_write_data
00024f 8069      	LDD  R6,Y+1
000250 8098      	LDD  R9,Y+0
000251 9622      	ADIW R28,2
000252 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000253 e0a2      	LDI  R26,LOW(2)
000254 940e 04a5 	CALL SUBOPT_0x6
000256 e0ac      	LDI  R26,LOW(12)
000257 dfe2      	RCALL __lcd_write_data
000258 e0a1      	LDI  R26,LOW(1)
000259 940e 04a5 	CALL SUBOPT_0x6
00025b e0e0      	LDI  R30,LOW(0)
00025c 2e9e      	MOV  R9,R30
00025d 2e6e      	MOV  R6,R30
00025e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00025f 93aa      	ST   -Y,R26
000260 81a8      	LD   R26,Y
000261 30aa      	CPI  R26,LOW(0xA)
000262 f011      	BREQ _0x2000005
000263 1468      	CP   R6,R8
000264 f048      	BRLO _0x2000004
                 _0x2000005:
000265 e0e0      	LDI  R30,LOW(0)
000266 93ea      	ST   -Y,R30
000267 9493      	INC  R9
000268 2da9      	MOV  R26,R9
000269 dfdc      	RCALL _lcd_gotoxy
00026a 81a8      	LD   R26,Y
00026b 30aa      	CPI  R26,LOW(0xA)
00026c f409      	BRNE _0x2000007
00026d c043      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
00026e 9463      	INC  R6
00026f 9aa8      	SBI  0x15,0
000270 81a8      	LD   R26,Y
000271 dfc8      	RCALL __lcd_write_data
000272 98a8      	CBI  0x15,0
000273 c03d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000274 93ba      	ST   -Y,R27
000275 93aa      	ST   -Y,R26
000276 931a      	ST   -Y,R17
                 _0x2000008:
000277 81a9      	LDD  R26,Y+1
000278 81ba      	LDD  R27,Y+1+1
000279 91ed      	LD   R30,X+
00027a 83a9      	STD  Y+1,R26
00027b 83ba      	STD  Y+1+1,R27
00027c 2f1e      	MOV  R17,R30
00027d 30e0      	CPI  R30,0
00027e f019      	BREQ _0x200000A
00027f 2fa1      	MOV  R26,R17
000280 dfde      	RCALL _lcd_putchar
000281 cff5      	RJMP _0x2000008
                 _0x200000A:
000282 8118      	LDD  R17,Y+0
000283 9623      	ADIW R28,3
000284 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000285 93aa      	ST   -Y,R26
000286 b3e4      	IN   R30,0x14
000287 6fe0      	ORI  R30,LOW(0xF0)
000288 bbe4      	OUT  0x14,R30
000289 9aa2      	SBI  0x14,2
00028a 9aa0      	SBI  0x14,0
00028b 9aa1      	SBI  0x14,1
00028c 98aa      	CBI  0x15,2
00028d 98a8      	CBI  0x15,0
00028e 98a9      	CBI  0x15,1
00028f 8088      	LDD  R8,Y+0
000290 81e8      	LD   R30,Y
000291 58e0      	SUBI R30,-LOW(128)
                +
000292 93e0 027a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000294 81e8      	LD   R30,Y
000295 54e0      	SUBI R30,-LOW(192)
                +
000296 93e0 027b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000298 e1a4      	LDI  R26,LOW(20)
000299 e0b0      	LDI  R27,0
00029a 940e 04df 	CALL _delay_ms
00029c 940e 04ab 	CALL SUBOPT_0x7
00029e 940e 04ab 	CALL SUBOPT_0x7
0002a0 940e 04ab 	CALL SUBOPT_0x7
0002a2 e2a0      	LDI  R26,LOW(32)
0002a3 df82      	RCALL __lcd_write_nibble_G100
                +
0002a4 ec88     +LDI R24 , LOW ( 200 )
0002a5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a6 9701     +SBIW R24 , 1
0002a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a8 e2a8      	LDI  R26,LOW(40)
0002a9 df90      	RCALL __lcd_write_data
0002aa e0a4      	LDI  R26,LOW(4)
0002ab df8e      	RCALL __lcd_write_data
0002ac e8a5      	LDI  R26,LOW(133)
0002ad df8c      	RCALL __lcd_write_data
0002ae e0a6      	LDI  R26,LOW(6)
0002af df8a      	RCALL __lcd_write_data
0002b0 dfa2      	RCALL _lcd_clear
                 _0x20C0002:
0002b1 9621      	ADIW R28,1
0002b2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0002b3 93ba      	ST   -Y,R27
0002b4 93aa      	ST   -Y,R26
0002b5 931a      	ST   -Y,R17
0002b6 930a      	ST   -Y,R16
0002b7 81aa      	LDD  R26,Y+2
0002b8 81bb      	LDD  R27,Y+2+1
0002b9 9612      	ADIW R26,2
0002ba 940e 068b 	CALL __GETW1P
0002bc 9730      	SBIW R30,0
0002bd f159      	BREQ _0x2040010
0002be 81aa      	LDD  R26,Y+2
0002bf 81bb      	LDD  R27,Y+2+1
0002c0 9614      	ADIW R26,4
0002c1 940e 068b 	CALL __GETW1P
0002c3 018f      	MOVW R16,R30
0002c4 9730      	SBIW R30,0
0002c5 f061      	BREQ _0x2040012
                +
0002c6 3002     +CPI R16 , LOW ( 2 )
0002c7 e0e0     +LDI R30 , HIGH ( 2 )
0002c8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002c9 f098      	BRLO _0x2040013
0002ca 01f8      	MOVW R30,R16
0002cb 9731      	SBIW R30,1
0002cc 018f      	MOVW R16,R30
                +
0002cd 81aa     +LDD R26 , Y + 2
0002ce 81bb     +LDD R27 , Y + 2 + 1
0002cf 9614     +ADIW R26 , 4
0002d0 93ed     +ST X + , R30
0002d1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0002d2 81aa      	LDD  R26,Y+2
0002d3 81bb      	LDD  R27,Y+2+1
0002d4 9612      	ADIW R26,2
0002d5 91ed      	LD   R30,X+
0002d6 91fd      	LD   R31,X+
0002d7 9631      	ADIW R30,1
0002d8 93fe      	ST   -X,R31
0002d9 93ee      	ST   -X,R30
0002da 9731      	SBIW R30,1
0002db 81ac      	LDD  R26,Y+4
0002dc 83a0      	STD  Z+0,R26
                 _0x2040013:
0002dd 81aa      	LDD  R26,Y+2
0002de 81bb      	LDD  R27,Y+2+1
0002df 940e 068b 	CALL __GETW1P
0002e1 23ff      	TST  R31
0002e2 f02a      	BRMI _0x2040014
0002e3 91ed      	LD   R30,X+
0002e4 91fd      	LD   R31,X+
0002e5 9631      	ADIW R30,1
0002e6 93fe      	ST   -X,R31
0002e7 93ee      	ST   -X,R30
                 _0x2040014:
0002e8 c006      	RJMP _0x2040015
                 _0x2040010:
0002e9 81aa      	LDD  R26,Y+2
0002ea 81bb      	LDD  R27,Y+2+1
0002eb efef      	LDI  R30,LOW(65535)
0002ec efff      	LDI  R31,HIGH(65535)
0002ed 93ed      	ST   X+,R30
0002ee 93fc      	ST   X,R31
                 _0x2040015:
0002ef 8119      	LDD  R17,Y+1
0002f0 8108      	LDD  R16,Y+0
0002f1 9625      	ADIW R28,5
0002f2 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0002f3 93ba      	ST   -Y,R27
0002f4 93aa      	ST   -Y,R26
0002f5 9726      	SBIW R28,6
0002f6 940e 06b0 	CALL __SAVELOCR6
0002f8 e010      	LDI  R17,0
0002f9 85ac      	LDD  R26,Y+12
0002fa 85bd      	LDD  R27,Y+12+1
0002fb e0e0      	LDI  R30,LOW(0)
0002fc e0f0      	LDI  R31,HIGH(0)
0002fd 93ed      	ST   X+,R30
0002fe 93fc      	ST   X,R31
                 _0x2040016:
0002ff 89ea      	LDD  R30,Y+18
000300 89fb      	LDD  R31,Y+18+1
000301 9631      	ADIW R30,1
000302 8bea      	STD  Y+18,R30
000303 8bfb      	STD  Y+18+1,R31
000304 9731      	SBIW R30,1
000305 91e4      	LPM  R30,Z
000306 2f2e      	MOV  R18,R30
000307 30e0      	CPI  R30,0
000308 f409      	BRNE PC+2
000309 c115      	RJMP _0x2040018
00030a 2fe1      	MOV  R30,R17
00030b 30e0      	CPI  R30,0
00030c f439      	BRNE _0x204001C
00030d 3225      	CPI  R18,37
00030e f411      	BRNE _0x204001D
00030f e011      	LDI  R17,LOW(1)
000310 c002      	RJMP _0x204001E
                 _0x204001D:
000311 940e 04b3 	CALL SUBOPT_0x8
                 _0x204001E:
000313 c10a      	RJMP _0x204001B
                 _0x204001C:
000314 30e1      	CPI  R30,LOW(0x1)
000315 f4a9      	BRNE _0x204001F
000316 3225      	CPI  R18,37
000317 f419      	BRNE _0x2040020
000318 940e 04b3 	CALL SUBOPT_0x8
00031a c102      	RJMP _0x20400CC
                 _0x2040020:
00031b e012      	LDI  R17,LOW(2)
00031c e040      	LDI  R20,LOW(0)
00031d e000      	LDI  R16,LOW(0)
00031e 322d      	CPI  R18,45
00031f f411      	BRNE _0x2040021
000320 e001      	LDI  R16,LOW(1)
000321 c0fc      	RJMP _0x204001B
                 _0x2040021:
000322 322b      	CPI  R18,43
000323 f411      	BRNE _0x2040022
000324 e24b      	LDI  R20,LOW(43)
000325 c0f8      	RJMP _0x204001B
                 _0x2040022:
000326 3220      	CPI  R18,32
000327 f411      	BRNE _0x2040023
000328 e240      	LDI  R20,LOW(32)
000329 c0f4      	RJMP _0x204001B
                 _0x2040023:
00032a c002      	RJMP _0x2040024
                 _0x204001F:
00032b 30e2      	CPI  R30,LOW(0x2)
00032c f439      	BRNE _0x2040025
                 _0x2040024:
00032d e050      	LDI  R21,LOW(0)
00032e e013      	LDI  R17,LOW(3)
00032f 3320      	CPI  R18,48
000330 f411      	BRNE _0x2040026
000331 6800      	ORI  R16,LOW(128)
000332 c0eb      	RJMP _0x204001B
                 _0x2040026:
000333 c003      	RJMP _0x2040027
                 _0x2040025:
000334 30e3      	CPI  R30,LOW(0x3)
000335 f009      	BREQ PC+2
000336 c0e7      	RJMP _0x204001B
                 _0x2040027:
000337 3320      	CPI  R18,48
000338 f010      	BRLO _0x204002A
000339 332a      	CPI  R18,58
00033a f008      	BRLO _0x204002B
                 _0x204002A:
00033b c007      	RJMP _0x2040029
                 _0x204002B:
00033c e0aa      	LDI  R26,LOW(10)
00033d 9f5a      	MUL  R21,R26
00033e 2d50      	MOV  R21,R0
00033f 2fe2      	MOV  R30,R18
000340 53e0      	SUBI R30,LOW(48)
000341 0f5e      	ADD  R21,R30
000342 c0db      	RJMP _0x204001B
                 _0x2040029:
000343 2fe2      	MOV  R30,R18
000344 36e3      	CPI  R30,LOW(0x63)
000345 f449      	BRNE _0x204002F
000346 940e 04ba 	CALL SUBOPT_0x9
000348 89e8      	LDD  R30,Y+16
000349 89f9      	LDD  R31,Y+16+1
00034a 81a4      	LDD  R26,Z+4
00034b 93aa      	ST   -Y,R26
00034c 940e 04c0 	CALL SUBOPT_0xA
00034e c0ce      	RJMP _0x2040030
                 _0x204002F:
00034f 37e3      	CPI  R30,LOW(0x73)
000350 f441      	BRNE _0x2040032
000351 940e 04ba 	CALL SUBOPT_0x9
000353 940e 04c6 	CALL SUBOPT_0xB
000355 940e 045b 	CALL _strlen
000357 2f1e      	MOV  R17,R30
000358 c00a      	RJMP _0x2040033
                 _0x2040032:
000359 37e0      	CPI  R30,LOW(0x70)
00035a f461      	BRNE _0x2040035
00035b 940e 04ba 	CALL SUBOPT_0x9
00035d 940e 04c6 	CALL SUBOPT_0xB
00035f 940e 0467 	CALL _strlenf
000361 2f1e      	MOV  R17,R30
000362 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000363 6002      	ORI  R16,LOW(2)
000364 770f      	ANDI R16,LOW(127)
000365 e030      	LDI  R19,LOW(0)
000366 c034      	RJMP _0x2040036
                 _0x2040035:
000367 36e4      	CPI  R30,LOW(0x64)
000368 f011      	BREQ _0x2040039
000369 36e9      	CPI  R30,LOW(0x69)
00036a f411      	BRNE _0x204003A
                 _0x2040039:
00036b 6004      	ORI  R16,LOW(4)
00036c c002      	RJMP _0x204003B
                 _0x204003A:
00036d 37e5      	CPI  R30,LOW(0x75)
00036e f431      	BRNE _0x204003C
                 _0x204003B:
00036f e5e4      	LDI  R30,LOW(_tbl10_G102*2)
000370 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
000371 83ee      	STD  Y+6,R30
000372 83ff      	STD  Y+6+1,R31
000373 e015      	LDI  R17,LOW(5)
000374 c00c      	RJMP _0x204003D
                 _0x204003C:
000375 35e8      	CPI  R30,LOW(0x58)
000376 f411      	BRNE _0x204003F
000377 6008      	ORI  R16,LOW(8)
000378 c003      	RJMP _0x2040040
                 _0x204003F:
000379 37e8      	CPI  R30,LOW(0x78)
00037a f009      	BREQ PC+2
00037b c0a1      	RJMP _0x2040071
                 _0x2040040:
00037c e5ee      	LDI  R30,LOW(_tbl16_G102*2)
00037d e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
00037e 83ee      	STD  Y+6,R30
00037f 83ff      	STD  Y+6+1,R31
000380 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000381 ff02      	SBRS R16,2
000382 c014      	RJMP _0x2040042
000383 940e 04ba 	CALL SUBOPT_0x9
000385 940e 04d0 	CALL SUBOPT_0xC
000387 85ab      	LDD  R26,Y+11
000388 23aa      	TST  R26
000389 f43a      	BRPL _0x2040043
00038a 85ea      	LDD  R30,Y+10
00038b 85fb      	LDD  R31,Y+10+1
00038c 940e 0670 	CALL __ANEGW1
00038e 87ea      	STD  Y+10,R30
00038f 87fb      	STD  Y+10+1,R31
000390 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000391 3040      	CPI  R20,0
000392 f011      	BREQ _0x2040044
000393 5f1f      	SUBI R17,-LOW(1)
000394 c001      	RJMP _0x2040045
                 _0x2040044:
000395 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000396 c004      	RJMP _0x2040046
                 _0x2040042:
000397 940e 04ba 	CALL SUBOPT_0x9
000399 940e 04d0 	CALL SUBOPT_0xC
                 _0x2040046:
                 _0x2040036:
00039b fd00      	SBRC R16,0
00039c c011      	RJMP _0x2040047
                 _0x2040048:
00039d 1715      	CP   R17,R21
00039e f478      	BRSH _0x204004A
00039f ff07      	SBRS R16,7
0003a0 c008      	RJMP _0x204004B
0003a1 ff02      	SBRS R16,2
0003a2 c004      	RJMP _0x204004C
0003a3 7f0b      	ANDI R16,LOW(251)
0003a4 2f24      	MOV  R18,R20
0003a5 5011      	SUBI R17,LOW(1)
0003a6 c001      	RJMP _0x204004D
                 _0x204004C:
0003a7 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003a8 c001      	RJMP _0x204004E
                 _0x204004B:
0003a9 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003aa 940e 04b3 	CALL SUBOPT_0x8
0003ac 5051      	SUBI R21,LOW(1)
0003ad cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003ae 2f31      	MOV  R19,R17
0003af ff01      	SBRS R16,1
0003b0 c017      	RJMP _0x204004F
                 _0x2040050:
0003b1 3030      	CPI  R19,0
0003b2 f0a1      	BREQ _0x2040052
0003b3 ff03      	SBRS R16,3
0003b4 c006      	RJMP _0x2040053
0003b5 81ee      	LDD  R30,Y+6
0003b6 81ff      	LDD  R31,Y+6+1
0003b7 9125      	LPM  R18,Z+
0003b8 83ee      	STD  Y+6,R30
0003b9 83ff      	STD  Y+6+1,R31
0003ba c005      	RJMP _0x2040054
                 _0x2040053:
0003bb 81ae      	LDD  R26,Y+6
0003bc 81bf      	LDD  R27,Y+6+1
0003bd 912d      	LD   R18,X+
0003be 83ae      	STD  Y+6,R26
0003bf 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0003c0 940e 04b3 	CALL SUBOPT_0x8
0003c2 3050      	CPI  R21,0
0003c3 f009      	BREQ _0x2040055
0003c4 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0003c5 5031      	SUBI R19,LOW(1)
0003c6 cfea      	RJMP _0x2040050
                 _0x2040052:
0003c7 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0003c8 e320      	LDI  R18,LOW(48)
0003c9 81ee      	LDD  R30,Y+6
0003ca 81ff      	LDD  R31,Y+6+1
0003cb 940e 069a 	CALL __GETW1PF
0003cd 87e8      	STD  Y+8,R30
0003ce 87f9      	STD  Y+8+1,R31
0003cf 81ee      	LDD  R30,Y+6
0003d0 81ff      	LDD  R31,Y+6+1
0003d1 9632      	ADIW R30,2
0003d2 83ee      	STD  Y+6,R30
0003d3 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0003d4 85e8      	LDD  R30,Y+8
0003d5 85f9      	LDD  R31,Y+8+1
0003d6 85aa      	LDD  R26,Y+10
0003d7 85bb      	LDD  R27,Y+10+1
0003d8 17ae      	CP   R26,R30
0003d9 07bf      	CPC  R27,R31
0003da f050      	BRLO _0x204005C
0003db 5f2f      	SUBI R18,-LOW(1)
0003dc 85a8      	LDD  R26,Y+8
0003dd 85b9      	LDD  R27,Y+8+1
0003de 85ea      	LDD  R30,Y+10
0003df 85fb      	LDD  R31,Y+10+1
0003e0 1bea      	SUB  R30,R26
0003e1 0bfb      	SBC  R31,R27
0003e2 87ea      	STD  Y+10,R30
0003e3 87fb      	STD  Y+10+1,R31
0003e4 cfef      	RJMP _0x204005A
                 _0x204005C:
0003e5 332a      	CPI  R18,58
0003e6 f028      	BRLO _0x204005D
0003e7 ff03      	SBRS R16,3
0003e8 c002      	RJMP _0x204005E
0003e9 5f29      	SUBI R18,-LOW(7)
0003ea c001      	RJMP _0x204005F
                 _0x204005E:
0003eb 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0003ec fd04      	SBRC R16,4
0003ed c01a      	RJMP _0x2040061
0003ee 3321      	CPI  R18,49
0003ef f420      	BRSH _0x2040063
0003f0 85a8      	LDD  R26,Y+8
0003f1 85b9      	LDD  R27,Y+8+1
0003f2 9711      	SBIW R26,1
0003f3 f409      	BRNE _0x2040062
                 _0x2040063:
0003f4 c009      	RJMP _0x20400CD
                 _0x2040062:
0003f5 1753      	CP   R21,R19
0003f6 f010      	BRLO _0x2040067
0003f7 ff00      	SBRS R16,0
0003f8 c001      	RJMP _0x2040068
                 _0x2040067:
0003f9 c013      	RJMP _0x2040066
                 _0x2040068:
0003fa e220      	LDI  R18,LOW(32)
0003fb ff07      	SBRS R16,7
0003fc c00b      	RJMP _0x2040069
0003fd e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0003fe 6100      	ORI  R16,LOW(16)
0003ff ff02      	SBRS R16,2
000400 c007      	RJMP _0x204006A
000401 7f0b      	ANDI R16,LOW(251)
000402 934a      	ST   -Y,R20
000403 940e 04c0 	CALL SUBOPT_0xA
000405 3050      	CPI  R21,0
000406 f009      	BREQ _0x204006B
000407 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000408 940e 04b3 	CALL SUBOPT_0x8
00040a 3050      	CPI  R21,0
00040b f009      	BREQ _0x204006C
00040c 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00040d 5031      	SUBI R19,LOW(1)
00040e 85a8      	LDD  R26,Y+8
00040f 85b9      	LDD  R27,Y+8+1
000410 9712      	SBIW R26,2
000411 f008      	BRLO _0x2040059
000412 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000413 ff00      	SBRS R16,0
000414 c008      	RJMP _0x204006D
                 _0x204006E:
000415 3050      	CPI  R21,0
000416 f031      	BREQ _0x2040070
000417 5051      	SUBI R21,LOW(1)
000418 e2e0      	LDI  R30,LOW(32)
000419 93ea      	ST   -Y,R30
00041a 940e 04c0 	CALL SUBOPT_0xA
00041c cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00041d e010      	LDI  R17,LOW(0)
                 _0x204001B:
00041e cee0      	RJMP _0x2040016
                 _0x2040018:
00041f 85ac      	LDD  R26,Y+12
000420 85bd      	LDD  R27,Y+12+1
000421 940e 068b 	CALL __GETW1P
000423 940e 06b7 	CALL __LOADLOCR6
000425 9664      	ADIW R28,20
000426 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000427 92ff      	PUSH R15
000428 2ef8      	MOV  R15,R24
000429 9726      	SBIW R28,6
00042a 940e 06b2 	CALL __SAVELOCR4
00042c 940e 04d8 	CALL SUBOPT_0xD
00042e 9730      	SBIW R30,0
00042f f419      	BRNE _0x2040072
000430 efef      	LDI  R30,LOW(65535)
000431 efff      	LDI  R31,HIGH(65535)
000432 c023      	RJMP _0x20C0001
                 _0x2040072:
000433 01de      	MOVW R26,R28
000434 9616      	ADIW R26,6
000435 940e 066c 	CALL __ADDW2R15
000437 018d      	MOVW R16,R26
000438 940e 04d8 	CALL SUBOPT_0xD
00043a 83ee      	STD  Y+6,R30
00043b 83ff      	STD  Y+6+1,R31
00043c e0e0      	LDI  R30,LOW(0)
00043d 87e8      	STD  Y+8,R30
00043e 87e9      	STD  Y+8+1,R30
00043f 01de      	MOVW R26,R28
000440 961a      	ADIW R26,10
000441 940e 066c 	CALL __ADDW2R15
000443 940e 068b 	CALL __GETW1P
000445 93fa      	ST   -Y,R31
000446 93ea      	ST   -Y,R30
000447 931a      	ST   -Y,R17
000448 930a      	ST   -Y,R16
000449 ebe3      	LDI  R30,LOW(_put_buff_G102)
00044a e0f2      	LDI  R31,HIGH(_put_buff_G102)
00044b 93fa      	ST   -Y,R31
00044c 93ea      	ST   -Y,R30
00044d 01de      	MOVW R26,R28
00044e 961a      	ADIW R26,10
00044f dea3      	RCALL __print_G102
000450 019f      	MOVW R18,R30
000451 81ae      	LDD  R26,Y+6
000452 81bf      	LDD  R27,Y+6+1
000453 e0e0      	LDI  R30,LOW(0)
000454 93ec      	ST   X,R30
000455 01f9      	MOVW R30,R18
                 _0x20C0001:
000456 940e 06b9 	CALL __LOADLOCR4
000458 962a      	ADIW R28,10
000459 90ff      	POP  R15
00045a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00045b 93ba      	ST   -Y,R27
00045c 93aa      	ST   -Y,R26
00045d 91a9          ld   r26,y+
00045e 91b9          ld   r27,y+
00045f 27ee          clr  r30
000460 27ff          clr  r31
                 strlen0:
000461 916d          ld   r22,x+
000462 2366          tst  r22
000463 f011          breq strlen1
000464 9631          adiw r30,1
000465 cffb          rjmp strlen0
                 strlen1:
000466 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000467 93ba      	ST   -Y,R27
000468 93aa      	ST   -Y,R26
000469 27aa          clr  r26
00046a 27bb          clr  r27
00046b 91e9          ld   r30,y+
00046c 91f9          ld   r31,y+
                 strlenf0:
00046d 9005      	lpm  r0,z+
00046e 2000          tst  r0
00046f f011          breq strlenf1
000470 9611          adiw r26,1
000471 cffb          rjmp strlenf0
                 strlenf1:
000472 01fd          movw r30,r26
000473 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _number:
000260           	.BYTE 0x14
                 _operator:
000274           	.BYTE 0x4
                 __base_y_G100:
000278           	.BYTE 0x4
                 __seed_G101:
00027c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x0:
000474 2fe1      	MOV  R30,R17
000475 e6a0      	LDI  R26,LOW(_number)
000476 e0b2      	LDI  R27,HIGH(_number)
000477 e0f0      	LDI  R31,0
000478 940e 067c 	CALL __LSLW2
00047a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00047b 0fae      	ADD  R26,R30
00047c 1fbf      	ADC  R27,R31
00047d 940e 068f 	CALL __GETD1P
00047f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
000480 2fa1      	MOV  R26,R17
000481 27bb      	CLR  R27
000482 940e 0681 	CALL __MULW2_4
                +
000484 59ac     +SUBI R26 , LOW ( - _number - ( 4 ) )
000485 4fbd     +SBCI R27 , HIGH ( - _number - ( 4 ) )
                 	__ADDW2MN _number,4
000486 940e 068f 	CALL __GETD1P
000488 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000489 e6a0      	LDI  R26,LOW(_number)
00048a e0b2      	LDI  R27,HIGH(_number)
00048b 940e 067c 	CALL __LSLW2
00048d 0fea      	ADD  R30,R26
00048e 1ffb      	ADC  R31,R27
00048f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000490 9892      	CBI  0x12,2
000491 9893      	CBI  0x12,3
000492 e0a5      	LDI  R26,LOW(5)
000493 e0b0      	LDI  R27,0
000494 940c 04df 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000496 2fe0      	MOV  R30,R16
000497 e6a0      	LDI  R26,LOW(_number)
000498 e0b2      	LDI  R27,HIGH(_number)
000499 e0f0      	LDI  R31,0
00049a 940e 067c 	CALL __LSLW2
00049c 0fae      	ADD  R26,R30
00049d 1fbf      	ADC  R27,R31
                +
00049e e0e0     +LDI R30 , LOW ( 0x0 )
00049f e0f0     +LDI R31 , HIGH ( 0x0 )
0004a0 e060     +LDI R22 , BYTE3 ( 0x0 )
0004a1 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0004a2 940e 0695 	CALL __PUTDP1
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0004a5 940e 023a 	CALL __lcd_write_data
0004a7 e0a3      	LDI  R26,LOW(3)
0004a8 e0b0      	LDI  R27,0
0004a9 940c 04df 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0004ab e3a0      	LDI  R26,LOW(48)
0004ac 940e 0226 	CALL __lcd_write_nibble_G100
                +
0004ae ec88     +LDI R24 , LOW ( 200 )
0004af e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004b0 9701     +SBIW R24 , 1
0004b1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
0004b3 932a      	ST   -Y,R18
0004b4 85ad      	LDD  R26,Y+13
0004b5 85be      	LDD  R27,Y+13+1
0004b6 85ef      	LDD  R30,Y+15
0004b7 89f8      	LDD  R31,Y+15+1
0004b8 9509      	ICALL
0004b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
0004ba 89e8      	LDD  R30,Y+16
0004bb 89f9      	LDD  R31,Y+16+1
0004bc 9734      	SBIW R30,4
0004bd 8be8      	STD  Y+16,R30
0004be 8bf9      	STD  Y+16+1,R31
0004bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0004c0 85ad      	LDD  R26,Y+13
0004c1 85be      	LDD  R27,Y+13+1
0004c2 85ef      	LDD  R30,Y+15
0004c3 89f8      	LDD  R31,Y+15+1
0004c4 9509      	ICALL
0004c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
0004c6 89a8      	LDD  R26,Y+16
0004c7 89b9      	LDD  R27,Y+16+1
0004c8 9614      	ADIW R26,4
0004c9 940e 068b 	CALL __GETW1P
0004cb 83ee      	STD  Y+6,R30
0004cc 83ff      	STD  Y+6+1,R31
0004cd 81ae      	LDD  R26,Y+6
0004ce 81bf      	LDD  R27,Y+6+1
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0004d0 89a8      	LDD  R26,Y+16
0004d1 89b9      	LDD  R27,Y+16+1
0004d2 9614      	ADIW R26,4
0004d3 940e 068b 	CALL __GETW1P
0004d5 87ea      	STD  Y+10,R30
0004d6 87fb      	STD  Y+10+1,R31
0004d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0004d8 01de      	MOVW R26,R28
0004d9 961c      	ADIW R26,12
0004da 940e 066c 	CALL __ADDW2R15
0004dc 940e 068b 	CALL __GETW1P
0004de 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004df 9610      	adiw r26,0
0004e0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004e1 ed80     +LDI R24 , LOW ( 0x7D0 )
0004e2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004e3 9701     +SBIW R24 , 1
0004e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004e5 95a8      	wdr
0004e6 9711      	sbiw r26,1
0004e7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004e8 9508      	ret
                 
                 __ROUND_REPACK:
0004e9 2355      	TST  R21
0004ea f442      	BRPL __REPACK
0004eb 3850      	CPI  R21,0x80
0004ec f411      	BRNE __ROUND_REPACK0
0004ed ffe0      	SBRS R30,0
0004ee c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004ef 9631      	ADIW R30,1
0004f0 1f69      	ADC  R22,R25
0004f1 1f79      	ADC  R23,R25
0004f2 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004f3 e850      	LDI  R21,0x80
0004f4 2757      	EOR  R21,R23
0004f5 f411      	BRNE __REPACK0
0004f6 935f      	PUSH R21
0004f7 c0cf      	RJMP __ZERORES
                 __REPACK0:
0004f8 3f5f      	CPI  R21,0xFF
0004f9 f031      	BREQ __REPACK1
0004fa 0f66      	LSL  R22
0004fb 0c00      	LSL  R0
0004fc 9557      	ROR  R21
0004fd 9567      	ROR  R22
0004fe 2f75      	MOV  R23,R21
0004ff 9508      	RET
                 __REPACK1:
000500 935f      	PUSH R21
000501 2000      	TST  R0
000502 f00a      	BRMI __REPACK2
000503 c0cf      	RJMP __MAXRES
                 __REPACK2:
000504 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000505 e850      	LDI  R21,0x80
000506 2e19      	MOV  R1,R25
000507 2215      	AND  R1,R21
000508 0f88      	LSL  R24
000509 1f99      	ROL  R25
00050a 2795      	EOR  R25,R21
00050b 0f55      	LSL  R21
00050c 9587      	ROR  R24
                 
                 __UNPACK1:
00050d e850      	LDI  R21,0x80
00050e 2e07      	MOV  R0,R23
00050f 2205      	AND  R0,R21
000510 0f66      	LSL  R22
000511 1f77      	ROL  R23
000512 2775      	EOR  R23,R21
000513 0f55      	LSL  R21
000514 9567      	ROR  R22
000515 9508      	RET
                 
                 __CFD1U:
000516 9468      	SET
000517 c001      	RJMP __CFD1U0
                 __CFD1:
000518 94e8      	CLT
                 __CFD1U0:
000519 935f      	PUSH R21
00051a dff2      	RCALL __UNPACK1
00051b 3870      	CPI  R23,0x80
00051c f018      	BRLO __CFD10
00051d 3f7f      	CPI  R23,0xFF
00051e f408      	BRCC __CFD10
00051f c0a7      	RJMP __ZERORES
                 __CFD10:
000520 e156      	LDI  R21,22
000521 1b57      	SUB  R21,R23
000522 f4aa      	BRPL __CFD11
000523 9551      	NEG  R21
000524 3058      	CPI  R21,8
000525 f40e      	BRTC __CFD19
000526 3059      	CPI  R21,9
                 __CFD19:
000527 f030      	BRLO __CFD17
000528 efef      	SER  R30
000529 efff      	SER  R31
00052a ef6f      	SER  R22
00052b e77f      	LDI  R23,0x7F
00052c f977      	BLD  R23,7
00052d c01a      	RJMP __CFD15
                 __CFD17:
00052e 2777      	CLR  R23
00052f 2355      	TST  R21
000530 f0b9      	BREQ __CFD15
                 __CFD18:
000531 0fee      	LSL  R30
000532 1fff      	ROL  R31
000533 1f66      	ROL  R22
000534 1f77      	ROL  R23
000535 955a      	DEC  R21
000536 f7d1      	BRNE __CFD18
000537 c010      	RJMP __CFD15
                 __CFD11:
000538 2777      	CLR  R23
                 __CFD12:
000539 3058      	CPI  R21,8
00053a f028      	BRLO __CFD13
00053b 2fef      	MOV  R30,R31
00053c 2ff6      	MOV  R31,R22
00053d 2f67      	MOV  R22,R23
00053e 5058      	SUBI R21,8
00053f cff9      	RJMP __CFD12
                 __CFD13:
000540 2355      	TST  R21
000541 f031      	BREQ __CFD15
                 __CFD14:
000542 9576      	LSR  R23
000543 9567      	ROR  R22
000544 95f7      	ROR  R31
000545 95e7      	ROR  R30
000546 955a      	DEC  R21
000547 f7d1      	BRNE __CFD14
                 __CFD15:
000548 2000      	TST  R0
000549 f40a      	BRPL __CFD16
00054a d129      	RCALL __ANEGD1
                 __CFD16:
00054b 915f      	POP  R21
00054c 9508      	RET
                 
                 __CDF1U:
00054d 9468      	SET
00054e c001      	RJMP __CDF1U0
                 __CDF1:
00054f 94e8      	CLT
                 __CDF1U0:
000550 9730      	SBIW R30,0
000551 4060      	SBCI R22,0
000552 4070      	SBCI R23,0
000553 f0b1      	BREQ __CDF10
000554 2400      	CLR  R0
000555 f026      	BRTS __CDF11
000556 2377      	TST  R23
000557 f412      	BRPL __CDF11
000558 9400      	COM  R0
000559 d11a      	RCALL __ANEGD1
                 __CDF11:
00055a 2e17      	MOV  R1,R23
00055b e17e      	LDI  R23,30
00055c 2011      	TST  R1
                 __CDF12:
00055d f032      	BRMI __CDF13
00055e 957a      	DEC  R23
00055f 0fee      	LSL  R30
000560 1fff      	ROL  R31
000561 1f66      	ROL  R22
000562 1c11      	ROL  R1
000563 cff9      	RJMP __CDF12
                 __CDF13:
000564 2fef      	MOV  R30,R31
000565 2ff6      	MOV  R31,R22
000566 2d61      	MOV  R22,R1
000567 935f      	PUSH R21
000568 df8a      	RCALL __REPACK
000569 915f      	POP  R21
                 __CDF10:
00056a 9508      	RET
                 
                 __SWAPACC:
00056b 934f      	PUSH R20
00056c 01af      	MOVW R20,R30
00056d 01fd      	MOVW R30,R26
00056e 01da      	MOVW R26,R20
00056f 01ab      	MOVW R20,R22
000570 01bc      	MOVW R22,R24
000571 01ca      	MOVW R24,R20
000572 2d40      	MOV  R20,R0
000573 2c01      	MOV  R0,R1
000574 2e14      	MOV  R1,R20
000575 914f      	POP  R20
000576 9508      	RET
                 
                 __UADD12:
000577 0fea      	ADD  R30,R26
000578 1ffb      	ADC  R31,R27
000579 1f68      	ADC  R22,R24
00057a 9508      	RET
                 
                 __NEGMAN1:
00057b 95e0      	COM  R30
00057c 95f0      	COM  R31
00057d 9560      	COM  R22
00057e 5fef      	SUBI R30,-1
00057f 4fff      	SBCI R31,-1
000580 4f6f      	SBCI R22,-1
000581 9508      	RET
                 
                 __SUBF12:
000582 935f      	PUSH R21
000583 df81      	RCALL __UNPACK
000584 3890      	CPI  R25,0x80
000585 f171      	BREQ __ADDF129
000586 e850      	LDI  R21,0x80
000587 2615      	EOR  R1,R21
                 
000588 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000589 935f      	PUSH R21
00058a df7a      	RCALL __UNPACK
00058b 3890      	CPI  R25,0x80
00058c f139      	BREQ __ADDF129
                 
                 __ADDF120:
00058d 3870      	CPI  R23,0x80
00058e f121      	BREQ __ADDF128
                 __ADDF121:
00058f 2f57      	MOV  R21,R23
000590 1b59      	SUB  R21,R25
000591 f12b      	BRVS __ADDF1211
000592 f412      	BRPL __ADDF122
000593 dfd7      	RCALL __SWAPACC
000594 cffa      	RJMP __ADDF121
                 __ADDF122:
000595 3158      	CPI  R21,24
000596 f018      	BRLO __ADDF123
000597 27aa      	CLR  R26
000598 27bb      	CLR  R27
000599 2788      	CLR  R24
                 __ADDF123:
00059a 3058      	CPI  R21,8
00059b f028      	BRLO __ADDF124
00059c 2fab      	MOV  R26,R27
00059d 2fb8      	MOV  R27,R24
00059e 2788      	CLR  R24
00059f 5058      	SUBI R21,8
0005a0 cff9      	RJMP __ADDF123
                 __ADDF124:
0005a1 2355      	TST  R21
0005a2 f029      	BREQ __ADDF126
                 __ADDF125:
0005a3 9586      	LSR  R24
0005a4 95b7      	ROR  R27
0005a5 95a7      	ROR  R26
0005a6 955a      	DEC  R21
0005a7 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005a8 2d50      	MOV  R21,R0
0005a9 2551      	EOR  R21,R1
0005aa f072      	BRMI __ADDF127
0005ab dfcb      	RCALL __UADD12
0005ac f438      	BRCC __ADDF129
0005ad 9567      	ROR  R22
0005ae 95f7      	ROR  R31
0005af 95e7      	ROR  R30
0005b0 9573      	INC  R23
0005b1 f413      	BRVC __ADDF129
0005b2 c020      	RJMP __MAXRES
                 __ADDF128:
0005b3 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005b4 df3e      	RCALL __REPACK
0005b5 915f      	POP  R21
0005b6 9508      	RET
                 __ADDF1211:
0005b7 f7d8      	BRCC __ADDF128
0005b8 cffb      	RJMP __ADDF129
                 __ADDF127:
0005b9 1bea      	SUB  R30,R26
0005ba 0bfb      	SBC  R31,R27
0005bb 0b68      	SBC  R22,R24
0005bc f051      	BREQ __ZERORES
0005bd f410      	BRCC __ADDF1210
0005be 9400      	COM  R0
0005bf dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005c0 2366      	TST  R22
0005c1 f392      	BRMI __ADDF129
0005c2 0fee      	LSL  R30
0005c3 1fff      	ROL  R31
0005c4 1f66      	ROL  R22
0005c5 957a      	DEC  R23
0005c6 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005c7 27ee      	CLR  R30
0005c8 27ff      	CLR  R31
0005c9 2766      	CLR  R22
0005ca 2777      	CLR  R23
0005cb 915f      	POP  R21
0005cc 9508      	RET
                 
                 __MINRES:
0005cd efef      	SER  R30
0005ce efff      	SER  R31
0005cf e76f      	LDI  R22,0x7F
0005d0 ef7f      	SER  R23
0005d1 915f      	POP  R21
0005d2 9508      	RET
                 
                 __MAXRES:
0005d3 efef      	SER  R30
0005d4 efff      	SER  R31
0005d5 e76f      	LDI  R22,0x7F
0005d6 e77f      	LDI  R23,0x7F
0005d7 915f      	POP  R21
0005d8 9508      	RET
                 
                 __MULF12:
0005d9 935f      	PUSH R21
0005da df2a      	RCALL __UNPACK
0005db 3870      	CPI  R23,0x80
0005dc f351      	BREQ __ZERORES
0005dd 3890      	CPI  R25,0x80
0005de f341      	BREQ __ZERORES
0005df 2401      	EOR  R0,R1
0005e0 9408      	SEC
0005e1 1f79      	ADC  R23,R25
0005e2 f423      	BRVC __MULF124
0005e3 f31c      	BRLT __ZERORES
                 __MULF125:
0005e4 2000      	TST  R0
0005e5 f33a      	BRMI __MINRES
0005e6 cfec      	RJMP __MAXRES
                 __MULF124:
0005e7 920f      	PUSH R0
0005e8 931f      	PUSH R17
0005e9 932f      	PUSH R18
0005ea 933f      	PUSH R19
0005eb 934f      	PUSH R20
0005ec 2711      	CLR  R17
0005ed 2722      	CLR  R18
0005ee 2799      	CLR  R25
0005ef 9f68      	MUL  R22,R24
0005f0 01a0      	MOVW R20,R0
0005f1 9f8f      	MUL  R24,R31
0005f2 2d30      	MOV  R19,R0
0005f3 0d41      	ADD  R20,R1
0005f4 1f59      	ADC  R21,R25
0005f5 9f6b      	MUL  R22,R27
0005f6 0d30      	ADD  R19,R0
0005f7 1d41      	ADC  R20,R1
0005f8 1f59      	ADC  R21,R25
0005f9 9f8e      	MUL  R24,R30
0005fa d027      	RCALL __MULF126
0005fb 9fbf      	MUL  R27,R31
0005fc d025      	RCALL __MULF126
0005fd 9f6a      	MUL  R22,R26
0005fe d023      	RCALL __MULF126
0005ff 9fbe      	MUL  R27,R30
000600 d01d      	RCALL __MULF127
000601 9faf      	MUL  R26,R31
000602 d01b      	RCALL __MULF127
000603 9fae      	MUL  R26,R30
000604 0d11      	ADD  R17,R1
000605 1f29      	ADC  R18,R25
000606 1f39      	ADC  R19,R25
000607 1f49      	ADC  R20,R25
000608 1f59      	ADC  R21,R25
000609 2fe3      	MOV  R30,R19
00060a 2ff4      	MOV  R31,R20
00060b 2f65      	MOV  R22,R21
00060c 2f52      	MOV  R21,R18
00060d 914f      	POP  R20
00060e 913f      	POP  R19
00060f 912f      	POP  R18
000610 911f      	POP  R17
000611 900f      	POP  R0
000612 2366      	TST  R22
000613 f02a      	BRMI __MULF122
000614 0f55      	LSL  R21
000615 1fee      	ROL  R30
000616 1fff      	ROL  R31
000617 1f66      	ROL  R22
000618 c002      	RJMP __MULF123
                 __MULF122:
000619 9573      	INC  R23
00061a f24b      	BRVS __MULF125
                 __MULF123:
00061b decd      	RCALL __ROUND_REPACK
00061c 915f      	POP  R21
00061d 9508      	RET
                 
                 __MULF127:
00061e 0d10      	ADD  R17,R0
00061f 1d21      	ADC  R18,R1
000620 1f39      	ADC  R19,R25
000621 c002      	RJMP __MULF128
                 __MULF126:
000622 0d20      	ADD  R18,R0
000623 1d31      	ADC  R19,R1
                 __MULF128:
000624 1f49      	ADC  R20,R25
000625 1f59      	ADC  R21,R25
000626 9508      	RET
                 
                 __DIVF21:
000627 935f      	PUSH R21
000628 dedc      	RCALL __UNPACK
000629 3870      	CPI  R23,0x80
00062a f421      	BRNE __DIVF210
00062b 2011      	TST  R1
                 __DIVF211:
00062c f40a      	BRPL __DIVF219
00062d cf9f      	RJMP __MINRES
                 __DIVF219:
00062e cfa4      	RJMP __MAXRES
                 __DIVF210:
00062f 3890      	CPI  R25,0x80
000630 f409      	BRNE __DIVF218
                 __DIVF217:
000631 cf95      	RJMP __ZERORES
                 __DIVF218:
000632 2401      	EOR  R0,R1
000633 9408      	SEC
000634 0b97      	SBC  R25,R23
000635 f41b      	BRVC __DIVF216
000636 f3d4      	BRLT __DIVF217
000637 2000      	TST  R0
000638 cff3      	RJMP __DIVF211
                 __DIVF216:
000639 2f79      	MOV  R23,R25
00063a 931f      	PUSH R17
00063b 932f      	PUSH R18
00063c 933f      	PUSH R19
00063d 934f      	PUSH R20
00063e 2411      	CLR  R1
00063f 2711      	CLR  R17
000640 2722      	CLR  R18
000641 2733      	CLR  R19
000642 2744      	CLR  R20
000643 2755      	CLR  R21
000644 e290      	LDI  R25,32
                 __DIVF212:
000645 17ae      	CP   R26,R30
000646 07bf      	CPC  R27,R31
000647 0786      	CPC  R24,R22
000648 0741      	CPC  R20,R17
000649 f030      	BRLO __DIVF213
00064a 1bae      	SUB  R26,R30
00064b 0bbf      	SBC  R27,R31
00064c 0b86      	SBC  R24,R22
00064d 0b41      	SBC  R20,R17
00064e 9408      	SEC
00064f c001      	RJMP __DIVF214
                 __DIVF213:
000650 9488      	CLC
                 __DIVF214:
000651 1f55      	ROL  R21
000652 1f22      	ROL  R18
000653 1f33      	ROL  R19
000654 1c11      	ROL  R1
000655 1faa      	ROL  R26
000656 1fbb      	ROL  R27
000657 1f88      	ROL  R24
000658 1f44      	ROL  R20
000659 959a      	DEC  R25
00065a f751      	BRNE __DIVF212
00065b 01f9      	MOVW R30,R18
00065c 2d61      	MOV  R22,R1
00065d 914f      	POP  R20
00065e 913f      	POP  R19
00065f 912f      	POP  R18
000660 911f      	POP  R17
000661 2366      	TST  R22
000662 f032      	BRMI __DIVF215
000663 0f55      	LSL  R21
000664 1fee      	ROL  R30
000665 1fff      	ROL  R31
000666 1f66      	ROL  R22
000667 957a      	DEC  R23
000668 f243      	BRVS __DIVF217
                 __DIVF215:
000669 de7f      	RCALL __ROUND_REPACK
00066a 915f      	POP  R21
00066b 9508      	RET
                 
                 __ADDW2R15:
00066c 2400      	CLR  R0
00066d 0daf      	ADD  R26,R15
00066e 1db0      	ADC  R27,R0
00066f 9508      	RET
                 
                 __ANEGW1:
000670 95f1      	NEG  R31
000671 95e1      	NEG  R30
000672 40f0      	SBCI R31,0
000673 9508      	RET
                 
                 __ANEGD1:
000674 95f0      	COM  R31
000675 9560      	COM  R22
000676 9570      	COM  R23
000677 95e1      	NEG  R30
000678 4fff      	SBCI R31,-1
000679 4f6f      	SBCI R22,-1
00067a 4f7f      	SBCI R23,-1
00067b 9508      	RET
                 
                 __LSLW2:
00067c 0fee      	LSL  R30
00067d 1fff      	ROL  R31
00067e 0fee      	LSL  R30
00067f 1fff      	ROL  R31
000680 9508      	RET
                 
                 __MULW2_4:
000681 0faa      	LSL  R26
000682 1fbb      	ROL  R27
000683 0faa      	LSL  R26
000684 1fbb      	ROL  R27
000685 9508      	RET
                 
                 __CWD1:
000686 2f6f      	MOV  R22,R31
000687 0f66      	ADD  R22,R22
000688 0b66      	SBC  R22,R22
000689 2f76      	MOV  R23,R22
00068a 9508      	RET
                 
                 __GETW1P:
00068b 91ed      	LD   R30,X+
00068c 91fc      	LD   R31,X
00068d 9711      	SBIW R26,1
00068e 9508      	RET
                 
                 __GETD1P:
00068f 91ed      	LD   R30,X+
000690 91fd      	LD   R31,X+
000691 916d      	LD   R22,X+
000692 917c      	LD   R23,X
000693 9713      	SBIW R26,3
000694 9508      	RET
                 
                 __PUTDP1:
000695 93ed      	ST   X+,R30
000696 93fd      	ST   X+,R31
000697 936d      	ST   X+,R22
000698 937c      	ST   X,R23
000699 9508      	RET
                 
                 __GETW1PF:
00069a 9005      	LPM  R0,Z+
00069b 91f4      	LPM  R31,Z
00069c 2de0      	MOV  R30,R0
00069d 9508      	RET
                 
                 __PUTPARD1:
00069e 937a      	ST   -Y,R23
00069f 936a      	ST   -Y,R22
0006a0 93fa      	ST   -Y,R31
0006a1 93ea      	ST   -Y,R30
0006a2 9508      	RET
                 
                 __SWAPD12:
0006a3 2e18      	MOV  R1,R24
0006a4 2f86      	MOV  R24,R22
0006a5 2d61      	MOV  R22,R1
0006a6 2e19      	MOV  R1,R25
0006a7 2f97      	MOV  R25,R23
0006a8 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0006a9 2e1b      	MOV  R1,R27
0006aa 2fbf      	MOV  R27,R31
0006ab 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0006ac 2e1a      	MOV  R1,R26
0006ad 2fae      	MOV  R26,R30
0006ae 2de1      	MOV  R30,R1
0006af 9508      	RET
                 
                 __SAVELOCR6:
0006b0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006b1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006b2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006b3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006b4 931a      	ST   -Y,R17
0006b5 930a      	ST   -Y,R16
0006b6 9508      	RET
                 
                 __LOADLOCR6:
0006b7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0006b8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0006b9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0006ba 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0006bb 8119      	LDD  R17,Y+1
0006bc 8108      	LD   R16,Y
0006bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :  30 r2 :   0 r3 :   0 r4 :  11 r5 :   2 r6 :   4 r7 :   5 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  48 r17:  71 r18:  41 r19:  28 r20:  33 r21:  80 r22:  61 r23:  49 
r24:  47 r25:  37 r26: 160 r27:  88 r28:  19 r29:   1 r30: 260 r31: 124 
x  :  33 y  : 171 z  :  18 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  26 add   :  18 
adiw  :  31 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  29 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   8 brne  :  47 brpl  :   7 brsh  :   4 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 102 
cbi   :  15 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   7 cpi   :  62 cpse  :   0 dec   :  12 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  24 ld    :  33 ldd   :  77 ldi   : 154 
lds   :   4 lpm   :  14 lsl   :  15 lsr   :   2 mov   :  75 movw  :  42 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  13 pop   :  47 push  :  47 rcall :  44 ret   :  52 
reti  :   0 rjmp  : 123 rol   :  28 ror   :  12 sbc   :   8 sbci  :  15 
sbi   :   9 sbic  :   4 sbis  :  12 sbiw  :  24 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  35 sts   :   2 sub   :   5 subi  :  31 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d7c   3392     60   3452   32768  10.5%
[.dseg] 0x000060 0x000280      0     32     32    2048   1.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
