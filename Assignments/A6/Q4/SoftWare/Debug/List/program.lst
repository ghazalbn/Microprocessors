
AVRASM ver. 2.1.30  D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm Thu Jan 27 07:01:38 2022

D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _c=R5
                 	.DEF _H=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1125): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x0:
00002b 7548
00002c 616d
00002d 6964
00002e 7974      	.DB  0x48,0x75,0x6D,0x61,0x64,0x69,0x74,0x79
00002f 203a
000030 2500
D:\uni\rizpar\assignments\6\Q4\SoftWare\Debug\List\program.asm(1129): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x3A,0x20,0x0,0x25,0x0
                 _0x2000003:
000032 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000033 0001      	.DW  0x01
000034 0005      	.DW  0x05
000035 0054      	.DW  __REG_VARS*2
                 
000036 000b      	.DW  0x0B
000037 0260      	.DW  _0xE
000038 0056      	.DW  _0x0*2
                 
000039 0002      	.DW  0x02
00003a 026b      	.DW  _0xE+11
00003b 0061      	.DW  _0x0*2+11
                 
00003c 0002      	.DW  0x02
00003d 026d      	.DW  __base_y_G100
00003e 0064      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000047 e08d      	LDI  R24,(14-2)+1
000048 e0a2      	LDI  R26,2
000049 27bb      	CLR  R27
                 __CLEAR_REG:
00004a 93ed      	ST   X+,R30
00004b 958a      	DEC  R24
00004c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e6e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000065 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000066 bfed      	OUT  SPL,R30
000067 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000068 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000069 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006b 940c 00b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;#include <alcd.h>
                 ;
                 ;#define DHT11_PIN 1
                 ;uint8_t c=0, H,;
                 ;
                 ;
                 ;unsigned char int_to_char(int x)
                 ; 0000 000B {
                 
                 	.CSEG
                 _int_to_char:
                 ; .FSTART _int_to_char
                 ; 0000 000C     return x + '0';
00006d 93ba      	ST   -Y,R27
00006e 93aa      	ST   -Y,R26
                 ;	x -> Y+0
00006f 81e8      	LD   R30,Y
000070 5de0      	SUBI R30,-LOW(48)
000071 c0a4      	RJMP _0x2020002
                 ; 0000 000D }
                 ; .FEND
                 ;
                 ;void put_on_lcd(int value, int c)
                 ; 0000 0010 {
                 _put_on_lcd:
                 ; .FSTART _put_on_lcd
                 ; 0000 0011     unsigned int r = 0;
                 ; 0000 0012     unsigned char tens = int_to_char(value / 10);
                 ; 0000 0013     unsigned char ones = int_to_char(value % 10);
                 ; 0000 0014     lcd_gotoxy(c, r);
000072 93ba      	ST   -Y,R27
000073 93aa      	ST   -Y,R26
000074 940e 01c1 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	c -> Y+4
                 ;	r -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
000076 e000     +LDI R16 , LOW ( 0 )
000077 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000078 81ae      	LDD  R26,Y+6
000079 81bf      	LDD  R27,Y+6+1
00007a e0ea      	LDI  R30,LOW(10)
00007b e0f0      	LDI  R31,HIGH(10)
00007c 940e 01a0 	CALL __DIVW21
00007e 01df      	MOVW R26,R30
00007f dfed      	RCALL _int_to_char
000080 2f3e      	MOV  R19,R30
000081 81ae      	LDD  R26,Y+6
000082 81bf      	LDD  R27,Y+6+1
000083 e0ea      	LDI  R30,LOW(10)
000084 e0f0      	LDI  R31,HIGH(10)
000085 940e 01a5 	CALL __MODW21
000087 01df      	MOVW R26,R30
000088 dfe4      	RCALL _int_to_char
000089 2f2e      	MOV  R18,R30
00008a 81ec      	LDD  R30,Y+4
00008b 93ea      	ST   -Y,R30
00008c 2fa0      	MOV  R26,R16
00008d d07d      	RCALL _lcd_gotoxy
                 ; 0000 0015     lcd_putchar(tens);
00008e 2fa3      	MOV  R26,R19
00008f d092      	RCALL _lcd_putchar
                 ; 0000 0016     lcd_gotoxy(c + 1, r);
000090 81ec      	LDD  R30,Y+4
000091 5fef      	SUBI R30,-LOW(1)
000092 93ea      	ST   -Y,R30
000093 2fa0      	MOV  R26,R16
000094 d076      	RCALL _lcd_gotoxy
                 ; 0000 0017     lcd_putchar(ones);
000095 2fa2      	MOV  R26,R18
000096 d08b      	RCALL _lcd_putchar
                 ; 0000 0018 }
000097 940e 01c6 	CALL __LOADLOCR4
000099 9628      	ADIW R28,8
00009a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;uint8_t read_h()
                 ; 0000 001C {
                 _read_h:
                 ; .FSTART _read_h
                 ; 0000 001D     unsigned char q;
                 ; 0000 001E     for (q=0; q<8; q++)
00009b 931a      	ST   -Y,R17
                 ;	q -> R17
00009c e010      	LDI  R17,LOW(0)
                 _0x4:
00009d 3018      	CPI  R17,8
00009e f488      	BRSH _0x5
                 ; 0000 001F     {
                 ; 0000 0020         while(!(PINA & (1<<DHT11_PIN)));
                 _0x6:
00009f 9bc9      	SBIS 0x19,1
0000a0 cffe      	RJMP _0x6
                 ; 0000 0021         delay_us(30);
                +
0000a1 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000a2 958a     +DEC R24
0000a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 0022         if(PINA & (1<<DHT11_PIN))
0000a4 9bc9      	SBIS 0x19,1
0000a5 c005      	RJMP _0x9
                 ; 0000 0023         	c = (c<<1)|(0x01);
0000a6 2de5      	MOV  R30,R5
0000a7 0fee      	LSL  R30
0000a8 60e1      	ORI  R30,1
0000a9 2e5e      	MOV  R5,R30
                 ; 0000 0024         else c = (c<<1);
0000aa c001      	RJMP _0xA
                 _0x9:
0000ab 0c55      	LSL  R5
                 ; 0000 0025         while(PINA & (1<<DHT11_PIN));
                 _0xA:
                 _0xB:
0000ac 99c9      	SBIC 0x19,1
0000ad cffe      	RJMP _0xB
                 ; 0000 0026     }
0000ae 5f1f      	SUBI R17,-1
0000af cfed      	RJMP _0x4
                 _0x5:
                 ; 0000 0027     return c;
0000b0 2de5      	MOV  R30,R5
0000b1 9119      	LD   R17,Y+
0000b2 9508      	RET
                 ; 0000 0028 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C     DDRB = 0xFF;
0000b3 efef      	LDI  R30,LOW(255)
0000b4 bbe7      	OUT  0x17,R30
                 ; 0000 002D 
                 ; 0000 002E     lcd_init(16);
0000b5 e1a0      	LDI  R26,LOW(16)
0000b6 d091      	RCALL _lcd_init
                 ; 0000 002F     lcd_gotoxy(0, 0);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93ea      	ST   -Y,R30
0000b9 e0a0      	LDI  R26,LOW(0)
0000ba d050      	RCALL _lcd_gotoxy
                 ; 0000 0030     lcd_puts("Humadity: ");
                +
0000bb e6a0     +LDI R26 , LOW ( _0xE + ( 0 ) )
0000bc e0b2     +LDI R27 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW2MN _0xE,0
0000bd d079      	RCALL _lcd_puts
                 ; 0000 0031 
                 ; 0000 0032     while(1)
                 _0xF:
                 ; 0000 0033     {
                 ; 0000 0034 		DDRA |= (1<<DHT11_PIN);
0000be 9ad1      	SBI  0x1A,1
                 ; 0000 0035 	    PORTA &= ~(1<<DHT11_PIN);
0000bf 98d9      	CBI  0x1B,1
                 ; 0000 0036 	    delay_ms(20);
0000c0 e1a4      	LDI  R26,LOW(20)
0000c1 e0b0      	LDI  R27,0
0000c2 940e 017f 	CALL _delay_ms
                 ; 0000 0037 	    PORTA |= (1<<DHT11_PIN);
0000c4 9ad9      	SBI  0x1B,1
                 ; 0000 0038 		DDRA &= ~(1<<DHT11_PIN);
0000c5 98d1      	CBI  0x1A,1
                 ; 0000 0039 	    while(PINA & (1<<DHT11_PIN));
                 _0x12:
0000c6 99c9      	SBIC 0x19,1
0000c7 cffe      	RJMP _0x12
                 ; 0000 003A 	    while(!(PINA & (1<<DHT11_PIN)));
                 _0x15:
0000c8 9bc9      	SBIS 0x19,1
0000c9 cffe      	RJMP _0x15
                 ; 0000 003B 	    while(PINA & (1<<DHT11_PIN));
                 _0x18:
0000ca 99c9      	SBIC 0x19,1
0000cb cffe      	RJMP _0x18
                 ; 0000 003C 
                 ; 0000 003D         H = read_h();
0000cc dfce      	RCALL _read_h
0000cd 2e4e      	MOV  R4,R30
                 ; 0000 003E 
                 ; 0000 003F     	put_on_lcd(H, 10);
0000ce e0f0      	LDI  R31,0
0000cf 93fa      	ST   -Y,R31
0000d0 93ea      	ST   -Y,R30
0000d1 e0aa      	LDI  R26,LOW(10)
0000d2 e0b0      	LDI  R27,0
0000d3 df9e      	RCALL _put_on_lcd
                 ; 0000 0040         lcd_gotoxy(12, 0);
0000d4 e0ec      	LDI  R30,LOW(12)
0000d5 93ea      	ST   -Y,R30
0000d6 e0a0      	LDI  R26,LOW(0)
0000d7 d033      	RCALL _lcd_gotoxy
                 ; 0000 0041         lcd_puts("%");
                +
0000d8 e6ab     +LDI R26 , LOW ( _0xE + ( 11 ) )
0000d9 e0b2     +LDI R27 , HIGH ( _0xE + ( 11 ) )
                 	__POINTW2MN _0xE,11
0000da d05c      	RCALL _lcd_puts
                 ; 0000 0042 
                 ; 0000 0043         if(H < 40 || H > 60)
0000db e2e8      	LDI  R30,LOW(40)
0000dc 164e      	CP   R4,R30
0000dd f018      	BRLO _0x1C
0000de e3ec      	LDI  R30,LOW(60)
0000df 15e4      	CP   R30,R4
0000e0 f410      	BRSH _0x1B
                 _0x1C:
                 ; 0000 0044            PORTB = 0x01;
0000e1 e0e1      	LDI  R30,LOW(1)
0000e2 c001      	RJMP _0x20
                 ; 0000 0045         else PORTB = 0x00;
                 _0x1B:
0000e3 e0e0      	LDI  R30,LOW(0)
                 _0x20:
0000e4 bbe8      	OUT  0x18,R30
                 ; 0000 0046 
                 ; 0000 0047     	delay_ms(100);
0000e5 e6a4      	LDI  R26,LOW(100)
0000e6 e0b0      	LDI  R27,0
0000e7 940e 017f 	CALL _delay_ms
                 ; 0000 0048     }
0000e9 cfd4      	RJMP _0xF
                 ; 0000 0049 }
                 _0x1F:
0000ea cfff      	RJMP _0x1F
                 ; .FEND
                 
                 	.DSEG
                 _0xE:
000260           	.BYTE 0xD
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000eb 93aa      	ST   -Y,R26
0000ec b3e5      	IN   R30,0x15
0000ed 70ef      	ANDI R30,LOW(0xF)
0000ee 2fae      	MOV  R26,R30
0000ef 81e8      	LD   R30,Y
0000f0 7fe0      	ANDI R30,LOW(0xF0)
0000f1 2bea      	OR   R30,R26
0000f2 bbe5      	OUT  0x15,R30
                +
0000f3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f4 958a     +DEC R24
0000f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f6 9aaa      	SBI  0x15,2
                +
0000f7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fa 98aa      	CBI  0x15,2
                +
0000fb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fe c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ff 93aa      	ST   -Y,R26
000100 81a8      	LD   R26,Y
000101 dfe9      	RCALL __lcd_write_nibble_G100
000102 81e8          ld    r30,y
000103 95e2          swap  r30
000104 83e8          st    y,r30
000105 81a8      	LD   R26,Y
000106 dfe4      	RCALL __lcd_write_nibble_G100
                +
000107 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000108 958a     +DEC R24
000109 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010a c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010b 93aa      	ST   -Y,R26
00010c 81e8      	LD   R30,Y
00010d e0f0      	LDI  R31,0
00010e 59e3      	SUBI R30,LOW(-__base_y_G100)
00010f 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000110 81e0      	LD   R30,Z
000111 81a9      	LDD  R26,Y+1
000112 0fae      	ADD  R26,R30
000113 dfeb      	RCALL __lcd_write_data
000114 8079      	LDD  R7,Y+1
000115 8068      	LDD  R6,Y+0
                 _0x2020002:
000116 9622      	ADIW R28,2
000117 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000118 e0a2      	LDI  R26,LOW(2)
000119 d059      	RCALL SUBOPT_0x0
00011a e0ac      	LDI  R26,LOW(12)
00011b dfe3      	RCALL __lcd_write_data
00011c e0a1      	LDI  R26,LOW(1)
00011d d055      	RCALL SUBOPT_0x0
00011e e0e0      	LDI  R30,LOW(0)
00011f 2e6e      	MOV  R6,R30
000120 2e7e      	MOV  R7,R30
000121 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000122 93aa      	ST   -Y,R26
000123 81a8      	LD   R26,Y
000124 30aa      	CPI  R26,LOW(0xA)
000125 f011      	BREQ _0x2000005
000126 1479      	CP   R7,R9
000127 f048      	BRLO _0x2000004
                 _0x2000005:
000128 e0e0      	LDI  R30,LOW(0)
000129 93ea      	ST   -Y,R30
00012a 9463      	INC  R6
00012b 2da6      	MOV  R26,R6
00012c dfde      	RCALL _lcd_gotoxy
00012d 81a8      	LD   R26,Y
00012e 30aa      	CPI  R26,LOW(0xA)
00012f f409      	BRNE _0x2000007
000130 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000131 9473      	INC  R7
000132 9aa8      	SBI  0x15,0
000133 81a8      	LD   R26,Y
000134 dfca      	RCALL __lcd_write_data
000135 98a8      	CBI  0x15,0
000136 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000137 93ba      	ST   -Y,R27
000138 93aa      	ST   -Y,R26
000139 931a      	ST   -Y,R17
                 _0x2000008:
00013a 81a9      	LDD  R26,Y+1
00013b 81ba      	LDD  R27,Y+1+1
00013c 91ed      	LD   R30,X+
00013d 83a9      	STD  Y+1,R26
00013e 83ba      	STD  Y+1+1,R27
00013f 2f1e      	MOV  R17,R30
000140 30e0      	CPI  R30,0
000141 f019      	BREQ _0x200000A
000142 2fa1      	MOV  R26,R17
000143 dfde      	RCALL _lcd_putchar
000144 cff5      	RJMP _0x2000008
                 _0x200000A:
000145 8118      	LDD  R17,Y+0
000146 9623      	ADIW R28,3
000147 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000148 93aa      	ST   -Y,R26
000149 b3e4      	IN   R30,0x14
00014a 6fe0      	ORI  R30,LOW(0xF0)
00014b bbe4      	OUT  0x14,R30
00014c 9aa2      	SBI  0x14,2
00014d 9aa0      	SBI  0x14,0
00014e 9aa1      	SBI  0x14,1
00014f 98aa      	CBI  0x15,2
000150 98a8      	CBI  0x15,0
000151 98a9      	CBI  0x15,1
000152 8098      	LDD  R9,Y+0
000153 81e8      	LD   R30,Y
000154 58e0      	SUBI R30,-LOW(128)
                +
000155 93e0 026f+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000157 81e8      	LD   R30,Y
000158 54e0      	SUBI R30,-LOW(192)
                +
000159 93e0 0270+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015b e1a4      	LDI  R26,LOW(20)
00015c e0b0      	LDI  R27,0
00015d 940e 017f 	CALL _delay_ms
00015f d018      	RCALL SUBOPT_0x1
000160 d017      	RCALL SUBOPT_0x1
000161 d016      	RCALL SUBOPT_0x1
000162 e2a0      	LDI  R26,LOW(32)
000163 df87      	RCALL __lcd_write_nibble_G100
                +
000164 ec88     +LDI R24 , LOW ( 200 )
000165 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000166 9701     +SBIW R24 , 1
000167 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000168 e2a8      	LDI  R26,LOW(40)
000169 df95      	RCALL __lcd_write_data
00016a e0a4      	LDI  R26,LOW(4)
00016b df93      	RCALL __lcd_write_data
00016c e8a5      	LDI  R26,LOW(133)
00016d df91      	RCALL __lcd_write_data
00016e e0a6      	LDI  R26,LOW(6)
00016f df8f      	RCALL __lcd_write_data
000170 dfa7      	RCALL _lcd_clear
                 _0x2020001:
000171 9621      	ADIW R28,1
000172 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
00026d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000173 df8b      	RCALL __lcd_write_data
000174 e0a3      	LDI  R26,LOW(3)
000175 e0b0      	LDI  R27,0
000176 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000178 e3a0      	LDI  R26,LOW(48)
000179 df71      	RCALL __lcd_write_nibble_G100
                +
00017a ec88     +LDI R24 , LOW ( 200 )
00017b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00017c 9701     +SBIW R24 , 1
00017d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00017e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00017f 9610      	adiw r26,0
000180 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000181 ed80     +LDI R24 , LOW ( 0x7D0 )
000182 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000183 9701     +SBIW R24 , 1
000184 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000185 95a8      	wdr
000186 9711      	sbiw r26,1
000187 f7c9      	brne __delay_ms0
                 __delay_ms1:
000188 9508      	ret
                 
                 __ANEGW1:
000189 95f1      	NEG  R31
00018a 95e1      	NEG  R30
00018b 40f0      	SBCI R31,0
00018c 9508      	RET
                 
                 __DIVW21U:
00018d 2400      	CLR  R0
00018e 2411      	CLR  R1
00018f e190      	LDI  R25,16
                 __DIVW21U1:
000190 0faa      	LSL  R26
000191 1fbb      	ROL  R27
000192 1c00      	ROL  R0
000193 1c11      	ROL  R1
000194 1a0e      	SUB  R0,R30
000195 0a1f      	SBC  R1,R31
000196 f418      	BRCC __DIVW21U2
000197 0e0e      	ADD  R0,R30
000198 1e1f      	ADC  R1,R31
000199 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00019a 60a1      	SBR  R26,1
                 __DIVW21U3:
00019b 959a      	DEC  R25
00019c f799      	BRNE __DIVW21U1
00019d 01fd      	MOVW R30,R26
00019e 01d0      	MOVW R26,R0
00019f 9508      	RET
                 
                 __DIVW21:
0001a0 d012      	RCALL __CHKSIGNW
0001a1 dfeb      	RCALL __DIVW21U
0001a2 f40e      	BRTC __DIVW211
0001a3 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001a4 9508      	RET
                 
                 __MODW21:
0001a5 94e8      	CLT
0001a6 ffb7      	SBRS R27,7
0001a7 c004      	RJMP __MODW211
0001a8 95a0      	COM  R26
0001a9 95b0      	COM  R27
0001aa 9611      	ADIW R26,1
0001ab 9468      	SET
                 __MODW211:
0001ac fdf7      	SBRC R31,7
0001ad dfdb      	RCALL __ANEGW1
0001ae dfde      	RCALL __DIVW21U
0001af 01fd      	MOVW R30,R26
0001b0 f40e      	BRTC __MODW212
0001b1 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001b2 9508      	RET
                 
                 __CHKSIGNW:
0001b3 94e8      	CLT
0001b4 fff7      	SBRS R31,7
0001b5 c002      	RJMP __CHKSW1
0001b6 dfd2      	RCALL __ANEGW1
0001b7 9468      	SET
                 __CHKSW1:
0001b8 ffb7      	SBRS R27,7
0001b9 c006      	RJMP __CHKSW2
0001ba 95a0      	COM  R26
0001bb 95b0      	COM  R27
0001bc 9611      	ADIW R26,1
0001bd f800      	BLD  R0,0
0001be 9403      	INC  R0
0001bf fa00      	BST  R0,0
                 __CHKSW2:
0001c0 9508      	RET
                 
                 __SAVELOCR4:
0001c1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001c2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001c3 931a      	ST   -Y,R17
0001c4 930a      	ST   -Y,R16
0001c5 9508      	RET
                 
                 __LOADLOCR4:
0001c6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001c7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001c8 8119      	LDD  R17,Y+1
0001c9 8108      	LD   R16,Y
0001ca 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   3 r5 :   4 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  12 r18:   4 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   7 r26:  64 r27:  21 r28:   5 r29:   1 r30:  83 r31:  15 
x  :   4 y  :  56 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   7 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   0 cpi   :   4 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  23 ld    :  15 ldd   :  16 ldi   :  68 
lds   :   0 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  16 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  10 pop   :   0 push  :   0 rcall :  40 ret   :  15 
reti  :   0 rjmp  :  22 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   7 sbic  :   3 sbis  :   3 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   1 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000396    874     44    918   32768   2.8%
[.dseg] 0x000060 0x000271      0     17     17    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
