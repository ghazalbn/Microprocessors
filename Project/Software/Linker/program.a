;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;int cooler = 0, heater = 0;
;float step = 22.5;

	.DSEG
;
;unsigned char int_to_char(int x) {
; 0000 0008 unsigned char int_to_char(int x) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009 	return x + '0';
;PCODE: $0000000F VOL: 0
;	x -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000A }
;PCODE: $00000014 VOL: 0
;
;void temp_on_lcd(int value, int c) {
; 0000 000C void temp_on_lcd(int value, int c) {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000D 	unsigned int r = 0;
; 0000 000E 	unsigned char tens = int_to_char(value / 10);
; 0000 000F 	unsigned char ones = int_to_char(value % 10);
; 0000 0010 	lcd_gotoxy(c, r);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	value -> Y+6
;	c -> Y+4
;	r -> R16,R17
;	tens -> R19
;	ones -> R18
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0011 	lcd_putchar(tens);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0012 	lcd_gotoxy(c + 1, r);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0013 	lcd_putchar(ones);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0014 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;void status_on_lcd(int cooler, int heater) {
; 0000 0016 void status_on_lcd(int cooler, int heater) {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0017 	lcd_gotoxy(2,1);
;PCODE: $0000003A VOL: 0
;	cooler -> Y+2
;	heater -> Y+0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0018 	if (!cooler) lcd_putsf("Cooler--> OFF");
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0019 	else lcd_putsf("Cooler--> ON ");
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 001A 
; 0000 001B     lcd_gotoxy(2,2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 001C     if (!heater) lcd_putsf("Heater--> OFF");
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 001D 	else lcd_putsf("Heater--> ON ");
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 001E }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input) {
; 0000 0024 unsigned int read_adc(unsigned char adc_input) {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0025 	ADMUX = adc_input | ADC_VREF_TYPE;
;PCODE: $00000060 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0026 	// Delay needed for the stabilization of the ADC input voltage
; 0000 0027 	delay_us(10);
;PCODE: $00000064 VOL: 0
; 0000 0028     // Start the AD conversion
; 0000 0029     ADCSRA |= (1 << ADSC);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002A     // Wait for the AD conversion to complete
; 0000 002B     while ((ADCSRA & (1 << ADIF)) == 0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 002C     ADCSRA |= (1 << ADIF);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 002D     return ADCW;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 002E }
;PCODE: $00000072 VOL: 0
;
;float computeDelay(float RPS) {
; 0000 0030 float computeDelay(float RPS) {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0031     return ((1 / RPS) / (4 * (90 / step))) * 1000; // seconds to miliseconds
;PCODE: $00000075 VOL: 0
;	RPS -> Y+0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0032 }
;PCODE: $00000085 VOL: 0
;
;void main(void) {
; 0000 0034 void main(void) {
;PCODE: $00000086 VOL: 0
; 0000 0035     int temperature;
; 0000 0036     unsigned int CRS = 4; // initial state: S1
; 0000 0037     float coolerDelay = computeDelay(CRS);
; 0000 0038     int i = 0;
; 0000 0039 
; 0000 003A     // ADC initialization
; 0000 003B     // ADC Clock frequency: 250.000 kHz
; 0000 003C     // ADC Voltage Reference: AVCC pin
; 0000 003D     // ADC Auto Trigger Source: ADC Stopped
; 0000 003E     ADMUX |= (1<<MUX0);
;PCODE: $00000087 VOL: 0
;	temperature -> R16,R17
;	CRS -> R18,R19
;	coolerDelay -> Y+0
;	i -> R20,R21
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 003F     //ADMUX=ADC_VREF_TYPE;
; 0000 0040     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0041     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0042 
; 0000 0043     DDRD=0xFF;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0044 	PORTD=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0045 
; 0000 0046     lcd_init(16);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0047 
; 0000 0048     lcd_gotoxy(2,0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0049     lcd_puts("Temp :");
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004A 
; 0000 004B     lcd_gotoxy(12, 0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 004C     lcd_putchar(223);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 004D 
; 0000 004E     lcd_gotoxy(13, 0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 004F     lcd_puts("C");
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0050 
; 0000 0051     delay_ms(100);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0052 
; 0000 0053     while (1) {
;PCODE: $000000B4 VOL: 0
; 0000 0054         unsigned delayInput = 35;
; 0000 0055 
; 0000 0056         temperature = read_adc(0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;	coolerDelay -> Y+2
;	delayInput -> Y+0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0057         temperature = temperature * 0.48898;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0058         temp_on_lcd(temperature, 9);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0059 
; 0000 005A 
; 0000 005B 		if(!cooler && !heater && temperature < 15) heater = 1;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 005C 
; 0000 005D 		else if(!cooler && !heater && temperature > 35) {cooler = 1; CRS = 4;}
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 005E 
; 0000 005F     	else if(cooler && !heater && temperature < 25) cooler = 0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0060 
; 0000 0061         else if(!cooler && heater && temperature > 30) heater = 0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0062 
; 0000 0063         status_on_lcd(cooler, heater);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0064 
; 0000 0065         /* S1 -> CRS = 4
; 0000 0066            S2 -> CRS = 6
; 0000 0067            S3 -> CRS = 8
; 0000 0068         */
; 0000 0069 
; 0000 006A 
; 0000 006B         if (CRS == 4 && temperature > 40) { // S1 -> S2
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 006C             CRS = 6;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 006D         } else if (CRS == 6 && temperature < 35) { // S2 -> S1
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 006E             CRS = 4;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 006F         } else if (CRS == 6 && temperature > 45) { // S2 -> S3
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0070             CRS = 8;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0071         } else if (CRS == 8 && temperature < 40) { // S3 -> S2
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0072             CRS = 6;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0073         }
; 0000 0074 
; 0000 0075         coolerDelay = computeDelay(CRS / ((float) 5));
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0076         if (cooler) delayInput = coolerDelay;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0077 
; 0000 0078         for (i = 0; i < 90 / step; i++) {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0079             PORTD = 0; // reset port
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 007A             if (cooler) PORTD |= 9;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 007B             if (heater) PORTD |= 144; // 9 << 4
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 007C             delay_ms(delayInput);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 007D             if (cooler) {PORTD &= 0xF0; PORTD |= 12;}
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 007E             if (heater) {PORTD &= 0x0F; PORTD |= 192; } // 12 << 4
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 007F             delay_ms(delayInput);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0080             if (cooler) {PORTD &= 0xF0; PORTD |= 6;}
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0081             if (heater) {PORTD &= 0x0F; PORTD |= 96; } // 6 << 4
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0082             delay_ms(delayInput);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0083             if (cooler) {PORTD &= 0xF0; PORTD |= 3;}
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0084             if (heater) {PORTD &= 0x0F; PORTD |= 48; } // 3 << 4
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0085             delay_ms(delayInput);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0086         }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0087     }
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0088 }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0

	.DSEG
_0xB:
	.BYTE 0x9
